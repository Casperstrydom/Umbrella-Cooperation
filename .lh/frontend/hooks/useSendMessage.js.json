{
    "sourceFile": "frontend/hooks/useSendMessage.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1738585623627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738586883777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,35 @@\n+import { useState } from 'react'\r\n+import useConversation from '../src/zustand/useConversation.js';\r\n+import toast from 'react-hot-toast'\r\n export const useSendMessage = () => {\r\n+\r\n+    const [loading, setLoading] = useState(false);\r\n+    const {messages, setMessages, selectedConversation} = useConversation();\r\n+\r\n+    const sendMessage = async (message) =>{\r\n+        setLoading(true);\r\n+        try {\r\n+          const res = await fetch(`/api/messages/send/${selectedConversation._id}`,{\r\n+            method: \"POST\",\r\n+            headers: {\r\n+                \"Content-Type\": \"application/json\"\r\n+            },\r\n+            body: JSON.stringify({message}),\r\n+          })  \r\n+          const data = await res.json();\r\n+          if(data.error){\r\n+            throw new Error(data.error);\r\n+          }\r\n+          setMessages([...messages, data]);\r\n+        } catch (error) {\r\n+           toast.error(message) \r\n+        } finally {\r\n+            setLoading(false);\r\n+        }\r\n+\r\n+    }\r\n+    return { sendMessage, loading };\r\n   \r\n };\r\n \r\n export default useSendMessage\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738586945068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,34 @@\n-import { useState } from 'react'\r\n+import { useState } from 'react';\r\n import useConversation from '../src/zustand/useConversation.js';\r\n-import toast from 'react-hot-toast'\r\n+import toast from 'react-hot-toast';\r\n+\r\n export const useSendMessage = () => {\r\n+  const [loading, setLoading] = useState(false);\r\n+  const { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n-    const [loading, setLoading] = useState(false);\r\n-    const {messages, setMessages, selectedConversation} = useConversation();\r\n+  const sendMessage = async (message) => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n+        body: JSON.stringify({ message }),\r\n+      });\r\n+      const data = await res.json();\r\n+      if (data.error) {\r\n+        throw new Error(data.error);\r\n+      }\r\n+      setMessages([...messages, data]);\r\n+    } catch (error) {\r\n+      toast.error(error.message); // Fix: Use the error object message here\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n \r\n-    const sendMessage = async (message) =>{\r\n\\ No newline at end of file\n-        setLoading(true);\r\n-        try {\r\n-          const res = await fetch(`/api/messages/send/${selectedConversation._id}`,{\r\n-            method: \"POST\",\r\n-            headers: {\r\n-                \"Content-Type\": \"application/json\"\r\n-            },\r\n-            body: JSON.stringify({message}),\r\n-          })  \r\n-          const data = await res.json();\r\n-          if(data.error){\r\n-            throw new Error(data.error);\r\n-          }\r\n-          setMessages([...messages, data]);\r\n-        } catch (error) {\r\n-           toast.error(message) \r\n-        } finally {\r\n-            setLoading(false);\r\n-        }\r\n-\r\n-    }\r\n-    return { sendMessage, loading };\r\n-  \r\n+  return { sendMessage, loading };\r\n };\r\n \r\n-export default useSendMessage\n+export default useSendMessage;\r\n"
                },
                {
                    "date": 1738588629082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,13 @@\n   const [loading, setLoading] = useState(false);\r\n   const { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n   const sendMessage = async (message) => {\r\n+    if (!selectedConversation?._id) {\r\n+      toast.error(\"No conversation selected.\");\r\n+      return;\r\n+    }\r\n+\r\n     setLoading(true);\r\n     try {\r\n       const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n         method: 'POST',\r\n@@ -15,15 +20,26 @@\n           'Content-Type': 'application/json',\r\n         },\r\n         body: JSON.stringify({ message }),\r\n       });\r\n+\r\n+      // Check if the response is ok (status 200)\r\n+      if (!res.ok) {\r\n+        throw new Error(`Failed with status: ${res.status}`);\r\n+      }\r\n+\r\n       const data = await res.json();\r\n+      \r\n+      // Check for errors in the response\r\n       if (data.error) {\r\n         throw new Error(data.error);\r\n       }\r\n+\r\n+      // Update messages state\r\n       setMessages([...messages, data]);\r\n     } catch (error) {\r\n-      toast.error(error.message); // Fix: Use the error object message here\r\n+      toast.error(error.message); // Show error to the user\r\n+      console.error(error); // Log detailed error info for debugging\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1738589069418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,8 @@\n   const [loading, setLoading] = useState(false);\r\n   const { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n   const sendMessage = async (message) => {\r\n-    if (!selectedConversation?._id) {\r\n-      toast.error(\"No conversation selected.\");\r\n-      return;\r\n-    }\r\n-\r\n     setLoading(true);\r\n     try {\r\n       const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n         method: 'POST',\r\n@@ -20,26 +15,15 @@\n           'Content-Type': 'application/json',\r\n         },\r\n         body: JSON.stringify({ message }),\r\n       });\r\n-\r\n-      // Check if the response is ok (status 200)\r\n-      if (!res.ok) {\r\n-        throw new Error(`Failed with status: ${res.status}`);\r\n-      }\r\n-\r\n       const data = await res.json();\r\n-      \r\n-      // Check for errors in the response\r\n       if (data.error) {\r\n         throw new Error(data.error);\r\n       }\r\n-\r\n-      // Update messages state\r\n       setMessages([...messages, data]);\r\n     } catch (error) {\r\n-      toast.error(error.message); // Show error to the user\r\n-      console.error(error); // Log detailed error info for debugging\r\n+      toast.error(error.message); // Fix: Use the error object message here\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1738650633661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n \r\n   const sendMessage = async (message) => {\r\n     setLoading(true);\r\n     try {\r\n-      const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n+      const res = await fetch(`/api/messages/send/${selectedConversation?._id}`, {\r\n         method: 'POST',\r\n         headers: {\r\n           'Content-Type': 'application/json',\r\n         },\r\n@@ -21,14 +21,14 @@\n         throw new Error(data.error);\r\n       }\r\n       setMessages([...messages, data]);\r\n     } catch (error) {\r\n-      toast.error(error.message); // Fix: Use the error object message here\r\n+      toast.error(error.message);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  return { sendMessage, loading };\r\n+  return { messages, sendMessage, loading }; // Include messages here\r\n };\r\n \r\n export default useSendMessage;\r\n"
                },
                {
                    "date": 1738651268042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,20 +15,25 @@\n           'Content-Type': 'application/json',\r\n         },\r\n         body: JSON.stringify({ message }),\r\n       });\r\n+\r\n       const data = await res.json();\r\n       if (data.error) {\r\n         throw new Error(data.error);\r\n       }\r\n-      setMessages([...messages, data]);\r\n+\r\n+      // ✅ Use data.data to get the actual message object\r\n+      setMessages([...messages, data.data]); \r\n+      console.log(\"Updated messages:\", [...messages, data.data]); // ✅ Log the new messages\r\n+\r\n     } catch (error) {\r\n       toast.error(error.message);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  return { messages, sendMessage, loading }; // Include messages here\r\n+  return { messages, sendMessage, loading };\r\n };\r\n \r\n export default useSendMessage;\r\n"
                },
                {
                    "date": 1738651471635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,43 @@\n-import { useState } from 'react';\r\n-import useConversation from '../src/zustand/useConversation.js';\r\n-import toast from 'react-hot-toast';\r\n+import { useState } from \"react\";\r\n+import useConversation from \"../src/zustand/useConversation.js\";\r\n+import toast from \"react-hot-toast\";\r\n \r\n export const useSendMessage = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n   const sendMessage = async (message) => {\r\n+    if (!selectedConversation?._id) {\r\n+      toast.error(\"No conversation selected!\");\r\n+      return;\r\n+    }\r\n+\r\n     setLoading(true);\r\n     try {\r\n-      const res = await fetch(`/api/messages/send/${selectedConversation?._id}`, {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n+      const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n+        method: \"POST\",\r\n+        headers: { \"Content-Type\": \"application/json\" },\r\n         body: JSON.stringify({ message }),\r\n       });\r\n \r\n       const data = await res.json();\r\n-      if (data.error) {\r\n-        throw new Error(data.error);\r\n-      }\r\n+      if (data.error) throw new Error(data.error);\r\n \r\n-      // ✅ Use data.data to get the actual message object\r\n-      setMessages([...messages, data.data]); \r\n-      console.log(\"Updated messages:\", [...messages, data.data]); // ✅ Log the new messages\r\n+      // ✅ Correctly update messages state\r\n+      setMessages((prev) => [...prev, data.data]);\r\n \r\n+      // ✅ Improved logging\r\n+      console.log(\"✅ Message sent successfully:\", data.data);\r\n+      console.log(\"✅ Updated Messages Array:\", [...messages, data.data]);\r\n+      console.log(\"✅ Messages Length:\", messages.length + 1);\r\n     } catch (error) {\r\n       toast.error(error.message);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  return { messages, sendMessage, loading };\r\n+  return { sendMessage, messages, loading };\r\n };\r\n \r\n export default useSendMessage;\r\n"
                },
                {
                    "date": 1738651923595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,34 @@\n-import { useState } from \"react\";\r\n-import useConversation from \"../src/zustand/useConversation.js\";\r\n-import toast from \"react-hot-toast\";\r\n+import { useState } from 'react';\r\n+import useConversation from '../src/zustand/useConversation.js';\r\n+import toast from 'react-hot-toast';\r\n \r\n export const useSendMessage = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n   const sendMessage = async (message) => {\r\n-    if (!selectedConversation?._id) {\r\n-      toast.error(\"No conversation selected!\");\r\n-      return;\r\n-    }\r\n-\r\n     setLoading(true);\r\n     try {\r\n       const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n-        method: \"POST\",\r\n-        headers: { \"Content-Type\": \"application/json\" },\r\n+        method: 'POST',\r\n+        headers: {\r\n+          'Content-Type': 'application/json',\r\n+        },\r\n         body: JSON.stringify({ message }),\r\n       });\r\n-\r\n       const data = await res.json();\r\n-      if (data.error) throw new Error(data.error);\r\n-\r\n-      // ✅ Correctly update messages state\r\n-      setMessages((prev) => [...prev, data.data]);\r\n-\r\n-      // ✅ Improved logging\r\n-      console.log(\"✅ Message sent successfully:\", data.data);\r\n-      console.log(\"✅ Updated Messages Array:\", [...messages, data.data]);\r\n-      console.log(\"✅ Messages Length:\", messages.length + 1);\r\n+      if (data.error) {\r\n+        throw new Error(data.error);\r\n+      }\r\n+      setMessages([...messages, data]);\r\n     } catch (error) {\r\n       toast.error(error.message);\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  return { sendMessage, messages, loading };\r\n+  return { sendMessage, loading, messages: Array.isArray(messages) ? messages : [] }; // Ensure messages is always an array\r\n };\r\n \r\n export default useSendMessage;\r\n"
                },
                {
                    "date": 1738652528880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,14 +21,14 @@\n         throw new Error(data.error);\r\n       }\r\n       setMessages([...messages, data]);\r\n     } catch (error) {\r\n-      toast.error(error.message);\r\n+      toast.error(error.message); // Fix: Use the error object message here\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  return { sendMessage, loading, messages: Array.isArray(messages) ? messages : [] }; // Ensure messages is always an array\r\n+  return { sendMessage, loading };\r\n };\r\n \r\n export default useSendMessage;\r\n"
                },
                {
                    "date": 1738829361341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,27 +3,43 @@\n import toast from 'react-hot-toast';\r\n \r\n export const useSendMessage = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const { messages, setMessages, selectedConversation } = useConversation();\r\n+  const { setMessages, selectedConversation } = useConversation(); // Remove messages here\r\n \r\n   const sendMessage = async (message) => {\r\n+    const token = localStorage.getItem(\"chat-user\")\r\n+      ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n+      : null;\r\n+\r\n+    if (!token) {\r\n+      toast.error(\"You are not authenticated. Please log in.\");\r\n+      return;\r\n+    }\r\n+\r\n     setLoading(true);\r\n+\r\n     try {\r\n       const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n         method: 'POST',\r\n         headers: {\r\n+          'Authorization': `Bearer ${token}`,\r\n           'Content-Type': 'application/json',\r\n         },\r\n         body: JSON.stringify({ message }),\r\n       });\r\n+\r\n       const data = await res.json();\r\n-      if (data.error) {\r\n-        throw new Error(data.error);\r\n+\r\n+      if (!res.ok) {\r\n+        throw new Error(data.error || \"Failed to send message\");\r\n       }\r\n-      setMessages([...messages, data]);\r\n+\r\n+      setMessages((prevMessages) => [...prevMessages, data]);\r\n+\r\n+      toast.success(\"Message sent successfully!\");\r\n     } catch (error) {\r\n-      toast.error(error.message); // Fix: Use the error object message here\r\n+      toast.error(error.message || \"An error occurred\");\r\n     } finally {\r\n       setLoading(false);\r\n     }\r\n   };\r\n"
                },
                {
                    "date": 1738829380693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import toast from 'react-hot-toast';\r\n \r\n export const useSendMessage = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const { setMessages, selectedConversation } = useConversation(); // Remove messages here\r\n+  const { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n   const sendMessage = async (message) => {\r\n     const token = localStorage.getItem(\"chat-user\")\r\n       ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n@@ -33,8 +33,10 @@\n       if (!res.ok) {\r\n         throw new Error(data.error || \"Failed to send message\");\r\n       }\r\n \r\n+      console.log(\"Current messages:\", messages);  // Use messages for logging or debugging\r\n+\r\n       setMessages((prevMessages) => [...prevMessages, data]);\r\n \r\n       toast.success(\"Message sent successfully!\");\r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1738837356366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import toast from 'react-hot-toast';\r\n \r\n export const useSendMessage = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const { messages, setMessages, selectedConversation } = useConversation();\r\n+  const { setMessages, selectedConversation } = useConversation();  // Removed messages\r\n \r\n   const sendMessage = async (message) => {\r\n     const token = localStorage.getItem(\"chat-user\")\r\n       ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n@@ -18,8 +18,9 @@\n \r\n     setLoading(true);\r\n \r\n     try {\r\n+      // Send message to the backend\r\n       const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n         method: 'POST',\r\n         headers: {\r\n           'Authorization': `Bearer ${token}`,\r\n@@ -29,16 +30,16 @@\n       });\r\n \r\n       const data = await res.json();\r\n \r\n+      // Handle the response\r\n       if (!res.ok) {\r\n         throw new Error(data.error || \"Failed to send message\");\r\n       }\r\n \r\n-      console.log(\"Current messages:\", messages);  // Use messages for logging or debugging\r\n+      // Add the newly sent message to the messages array\r\n+      setMessages((prevMessages) => [...prevMessages, data.message]);\r\n \r\n-      setMessages((prevMessages) => [...prevMessages, data]);\r\n-\r\n       toast.success(\"Message sent successfully!\");\r\n     } catch (error) {\r\n       toast.error(error.message || \"An error occurred\");\r\n     } finally {\r\n"
                },
                {
                    "date": 1738837531979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import toast from 'react-hot-toast';\r\n \r\n export const useSendMessage = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const { setMessages, selectedConversation } = useConversation();  // Removed messages\r\n+  const { setMessages, selectedConversation } = useConversation();\r\n \r\n   const sendMessage = async (message) => {\r\n     const token = localStorage.getItem(\"chat-user\")\r\n       ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n@@ -35,10 +35,10 @@\n       if (!res.ok) {\r\n         throw new Error(data.error || \"Failed to send message\");\r\n       }\r\n \r\n-      // Add the newly sent message to the messages array\r\n-      setMessages((prevMessages) => [...prevMessages, data.message]);\r\n+      // Update the conversation's messages in the frontend\r\n+      setMessages((prevMessages) => [...prevMessages, data.data]);\r\n \r\n       toast.success(\"Message sent successfully!\");\r\n     } catch (error) {\r\n       toast.error(error.message || \"An error occurred\");\r\n"
                },
                {
                    "date": 1738838390019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,32 @@\n-import { useState } from 'react';\r\n-import useConversation from '../src/zustand/useConversation.js';\r\n-import toast from 'react-hot-toast';\r\n+import { useState } from \"react\";\r\n+import useConversation from \"../zustand/useConversation\";\r\n+import toast from \"react-hot-toast\";\r\n \r\n-export const useSendMessage = () => {\r\n-  const [loading, setLoading] = useState(false);\r\n-  const { setMessages, selectedConversation } = useConversation();\r\n+const useSendMessage = () => {\r\n+\tconst [loading, setLoading] = useState(false);\r\n+\tconst { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n-  const sendMessage = async (message) => {\r\n-    const token = localStorage.getItem(\"chat-user\")\r\n-      ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n-      : null;\r\n+\tconst sendMessage = async (message) => {\r\n+\t\tsetLoading(true);\r\n+\t\ttry {\r\n+\t\t\tconst res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n+\t\t\t\tmethod: \"POST\",\r\n+\t\t\t\theaders: {\r\n+\t\t\t\t\t\"Content-Type\": \"application/json\",\r\n+\t\t\t\t},\r\n+\t\t\t\tbody: JSON.stringify({ message }),\r\n+\t\t\t});\r\n+\t\t\tconst data = await res.json();\r\n+\t\t\tif (data.error) throw new Error(data.error);\r\n \r\n-    if (!token) {\r\n-      toast.error(\"You are not authenticated. Please log in.\");\r\n-      return;\r\n-    }\r\n+\t\t\tsetMessages([...messages, data]);\r\n+\t\t} catch (error) {\r\n+\t\t\ttoast.error(error.message);\r\n+\t\t} finally {\r\n+\t\t\tsetLoading(false);\r\n+\t\t}\r\n+\t};\r\n \r\n-    setLoading(true);\r\n-\r\n-    try {\r\n-      // Send message to the backend\r\n-      const res = await fetch(`/api/messages/send/${selectedConversation._id}`, {\r\n-        method: 'POST',\r\n-        headers: {\r\n-          'Authorization': `Bearer ${token}`,\r\n-          'Content-Type': 'application/json',\r\n-        },\r\n-        body: JSON.stringify({ message }),\r\n-      });\r\n-\r\n-      const data = await res.json();\r\n-\r\n-      // Handle the response\r\n-      if (!res.ok) {\r\n-        throw new Error(data.error || \"Failed to send message\");\r\n-      }\r\n-\r\n-      // Update the conversation's messages in the frontend\r\n-      setMessages((prevMessages) => [...prevMessages, data.data]);\r\n-\r\n-      toast.success(\"Message sent successfully!\");\r\n-    } catch (error) {\r\n-      toast.error(error.message || \"An error occurred\");\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return { sendMessage, loading };\r\n+\treturn { sendMessage, loading };\r\n };\r\n-\r\n-export default useSendMessage;\r\n+export default useSendMessage;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738839608622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useState } from \"react\";\r\n-import useConversation from \"../zustand/useConversation\";\r\n+import useConversation from \"../src/zustand/useConversation\";\r\n import toast from \"react-hot-toast\";\r\n \r\n const useSendMessage = () => {\r\n \tconst [loading, setLoading] = useState(false);\r\n"
                }
            ],
            "date": 1738585623627,
            "name": "Commit-0",
            "content": "export const useSendMessage = () => {\r\n  \r\n};\r\n\r\nexport default useSendMessage"
        }
    ]
}