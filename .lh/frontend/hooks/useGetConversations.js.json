{
    "sourceFile": "frontend/hooks/useGetConversations.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 31,
            "patches": [
                {
                    "date": 1738565235964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738569420309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,24 +4,25 @@\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const [conversations, setConversations] = useState([]);\r\n \r\n-  useEffect(() => {\r\n-    const getConversations = async () => {\r\n-      setLoading(true);\r\n-      try {\r\n-        const res = await fetch(\"/api/users\");\r\n-        const data = await res.json();\r\n-        if (data.error) {\r\n-          throw new Error(data.error);\r\n-        }\r\n-        setConversations(data);\r\n-      } catch (error) {\r\n-        toast.error(error.message);\r\n-      } finally {\r\n-        setLoading(false);\r\n+  useEffect(() => {const getConversations = async () => {\r\n+    setLoading(true);\r\n+    try {\r\n+      const res = await fetch(\"/api/users\");\r\n+      const data = await res.json();\r\n+      console.log(\"API Response:\", data);  // Log the data to check its structure\r\n+      if (data.error) {\r\n+        throw new Error(data.error);\r\n       }\r\n-    };\r\n+      setConversations(data);\r\n+    } catch (error) {\r\n+      toast.error(error.message);\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+  \r\n \r\n     getConversations();\r\n   }, []); // Added dependency array to prevent infinite re-renders\r\n \r\n"
                },
                {
                    "date": 1738569842494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,28 +1,28 @@\n import { useState, useEffect } from \"react\";\r\n-import { toast } from \"react-toastify\"; // Ensure you have react-toastify installed\r\n+import { toast } from \"react-toastify\";\r\n \r\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const [conversations, setConversations] = useState([]);\r\n \r\n-  useEffect(() => {const getConversations = async () => {\r\n-    setLoading(true);\r\n-    try {\r\n-      const res = await fetch(\"/api/users\");\r\n-      const data = await res.json();\r\n-      console.log(\"API Response:\", data);  // Log the data to check its structure\r\n-      if (data.error) {\r\n-        throw new Error(data.error);\r\n+  useEffect(() => {\r\n+    const getConversations = async () => {\r\n+      setLoading(true);\r\n+      try {\r\n+        const res = await fetch(\"/api/users\");\r\n+        const data = await res.json();\r\n+        console.log(\"API Response:\", data);\r\n+        if (data.error) {\r\n+          throw new Error(data.error);\r\n+        }\r\n+        setConversations(data);\r\n+      } catch (error) {\r\n+        toast.error(error.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n       }\r\n-      setConversations(data);\r\n-    } catch (error) {\r\n-      toast.error(error.message);\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-  \r\n+    };\r\n \r\n     getConversations();\r\n   }, []); // Added dependency array to prevent infinite re-renders\r\n \r\n"
                },
                {
                    "date": 1738651772219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,20 +2,22 @@\n import { toast } from \"react-toastify\";\r\n \r\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const [conversations, setConversations] = useState([]);\r\n+  const [conversations, setConversations] = useState([]); // âœ… Ensure it's always an array\r\n \r\n   useEffect(() => {\r\n     const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n         const res = await fetch(\"/api/users\");\r\n         const data = await res.json();\r\n-        console.log(\"API Response:\", data);\r\n-        if (data.error) {\r\n-          throw new Error(data.error);\r\n+        console.log(\"ðŸ“© API Response:\", data);\r\n+\r\n+        if (!Array.isArray(data)) {\r\n+          throw new Error(\"Invalid data format: Expected an array\");\r\n         }\r\n+\r\n         setConversations(data);\r\n       } catch (error) {\r\n         toast.error(error.message);\r\n       } finally {\r\n@@ -23,9 +25,9 @@\n       }\r\n     };\r\n \r\n     getConversations();\r\n-  }, []); // Added dependency array to prevent infinite re-renders\r\n+  }, []); // âœ… Dependency array prevents infinite re-renders\r\n \r\n   return { conversations, loading };\r\n };\r\n \r\n"
                },
                {
                    "date": 1738652541517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,22 +2,20 @@\n import { toast } from \"react-toastify\";\r\n \r\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const [conversations, setConversations] = useState([]); // âœ… Ensure it's always an array\r\n+  const [conversations, setConversations] = useState([]);\r\n \r\n   useEffect(() => {\r\n     const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n         const res = await fetch(\"/api/users\");\r\n         const data = await res.json();\r\n-        console.log(\"ðŸ“© API Response:\", data);\r\n-\r\n-        if (!Array.isArray(data)) {\r\n-          throw new Error(\"Invalid data format: Expected an array\");\r\n+        console.log(\"API Response:\", data);\r\n+        if (data.error) {\r\n+          throw new Error(data.error);\r\n         }\r\n-\r\n         setConversations(data);\r\n       } catch (error) {\r\n         toast.error(error.message);\r\n       } finally {\r\n@@ -25,9 +23,9 @@\n       }\r\n     };\r\n \r\n     getConversations();\r\n-  }, []); // âœ… Dependency array prevents infinite re-renders\r\n+  }, []); // Added dependency array to prevent infinite re-renders\r\n \r\n   return { conversations, loading };\r\n };\r\n \r\n"
                },
                {
                    "date": 1738653403719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,28 @@\n import { useState, useEffect } from \"react\";\r\n-import { toast } from \"react-toastify\";\r\n+import useConversation from '../src/zustand/useConversation';\r\n+import toast from 'react-hot-toast';\r\n \r\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const [conversations, setConversations] = useState([]);\r\n+  const { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n   useEffect(() => {\r\n-    const getConversations = async () => {\r\n+    const getMessages = async () => {\r\n       setLoading(true);\r\n       try {\r\n-        const res = await fetch(\"/api/users\");\r\n+        const res = await fetch(`/api/messages/${selectedConversation._id}`);\r\n         const data = await res.json();\r\n-        console.log(\"API Response:\", data);\r\n-        if (data.error) {\r\n-          throw new Error(data.error);\r\n-        }\r\n-        setConversations(data);\r\n+        setMessages(data.messages);\r\n       } catch (error) {\r\n-        toast.error(error.message);\r\n+        toast.error(error.message)\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n+    if (selectedConversation._id) getMessages();\r\n+  }, [selectedConversation._id, setMessages]); // added setMessages to dependencies\r\n \r\n-    getConversations();\r\n-  }, []); // Added dependency array to prevent infinite re-renders\r\n-\r\n-  return { conversations, loading };\r\n+  return { messages, loading }; // You may want to return the state to use it in your component\r\n };\r\n \r\n export default useGetConversations;\r\n"
                },
                {
                    "date": 1738653441981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,11 @@\n         setLoading(false);\r\n       }\r\n     };\r\n     if (selectedConversation._id) getMessages();\r\n-  }, [selectedConversation._id, setMessages]); // added setMessages to dependencies\r\n+  }, [selectedConversation._id, setMessages]); \r\n+  \r\n \r\n-  return { messages, loading }; // You may want to return the state to use it in your component\r\n+  return { messages, loading }; \r\n };\r\n \r\n export default useGetConversations;\r\n"
                },
                {
                    "date": 1738653706450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,32 @@\n import { useState, useEffect } from \"react\";\r\n-import useConversation from '../src/zustand/useConversation';\r\n-import toast from 'react-hot-toast';\r\n+import { toast } from \"react-toastify\";\r\n \r\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const { messages, setMessages, selectedConversation } = useConversation();\r\n+  const [conversations, setConversations] = useState([]);\r\n \r\n   useEffect(() => {\r\n-    const getMessages = async () => {\r\n+    const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n-        const res = await fetch(`/api/messages/${selectedConversation._id}`);\r\n+        const res = await fetch(\"/api/users\");\r\n         const data = await res.json();\r\n-        setMessages(data.messages);\r\n+        console.log(\"API Response:\", data);\r\n+        if (data.error) {\r\n+          throw new Error(data.error);\r\n+        }\r\n+        setConversations(data);\r\n       } catch (error) {\r\n-        toast.error(error.message)\r\n+        toast.error(error.message);\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n-    if (selectedConversation._id) getMessages();\r\n-  }, [selectedConversation._id, setMessages]); \r\n-  \r\n \r\n-  return { messages, loading }; \r\n+    getConversations();\r\n+  }, []); // Added dependency array to prevent infinite re-renders\r\n+\r\n+  return { conversations, loading };\r\n };\r\n \r\n export default useGetConversations;\r\n"
                },
                {
                    "date": 1738823818321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,15 @@\n   useEffect(() => {\r\n     const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n-        const res = await fetch(\"/api/users\");\r\n+        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n+        const res = await fetch(\"/api/users\", { // Change this to the correct endpoint\r\n+\r\n+          headers: {\r\n+            \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n+          },\r\n+        });\r\n         const data = await res.json();\r\n         console.log(\"API Response:\", data);\r\n         if (data.error) {\r\n           throw new Error(data.error);\r\n"
                },
                {
                    "date": 1738823851780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,9 @@\n     const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n         const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n-        const res = await fetch(\"/api/users\", { // Change this to the correct endpoint\r\n-\r\n+        const res = await fetch(\"/api/users\", {\r\n           headers: {\r\n             \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n           },\r\n         });\r\n@@ -35,4 +34,5 @@\n   return { conversations, loading };\r\n };\r\n \r\n export default useGetConversations;\r\n+\r\n"
                },
                {
                    "date": 1738823954824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n         const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n-        const res = await fetch(\"/api/users\", {\r\n+        const res = await fetch(\"/api/users\", { // Ensure this URL is correct\r\n           headers: {\r\n             \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n           },\r\n         });\r\n@@ -34,5 +34,4 @@\n   return { conversations, loading };\r\n };\r\n \r\n export default useGetConversations;\r\n-\r\n"
                },
                {
                    "date": 1738824255894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n             \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n           },\r\n         });\r\n         const data = await res.json();\r\n-        console.log(\"API Response:\", data);\r\n+        console.log(\"API Response:\", data); // Added console log to inspect the API response\r\n         if (data.error) {\r\n           throw new Error(data.error);\r\n         }\r\n         setConversations(data);\r\n@@ -33,5 +33,5 @@\n \r\n   return { conversations, loading };\r\n };\r\n \r\n-export default useGetConversations;\r\n+export default useGetConversations;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738825017279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,23 @@\n-import { useState, useEffect } from \"react\";\r\n-import { toast } from \"react-toastify\";\r\n+import useGetConversations from \"../src/zustand/useConversation\";\r\n \r\n-const useGetConversations = () => {\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [conversations, setConversations] = useState([]);\r\n+const Conversations = () => {\r\n+  const { conversations, loading } = useGetConversations();\r\n \r\n-  useEffect(() => {\r\n-    const getConversations = async () => {\r\n-      setLoading(true);\r\n-      try {\r\n-        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n-        const res = await fetch(\"/api/users\", { // Ensure this URL is correct\r\n-          headers: {\r\n-            \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n-          },\r\n-        });\r\n-        const data = await res.json();\r\n-        console.log(\"API Response:\", data); // Added console log to inspect the API response\r\n-        if (data.error) {\r\n-          throw new Error(data.error);\r\n-        }\r\n-        setConversations(data);\r\n-      } catch (error) {\r\n-        toast.error(error.message);\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n+  if (loading) return <p>Loading...</p>;\r\n+  if (conversations.length === 0) return <p>No conversations found</p>;\r\n \r\n-    getConversations();\r\n-  }, []); // Added dependency array to prevent infinite re-renders\r\n\\ No newline at end of file\n-\r\n-  return { conversations, loading };\r\n+  return (\r\n+    <div>\r\n+      {conversations.map((conversation, idx) => (\r\n+        <Conversation\r\n+          key={conversation._id}\r\n+          conversation={conversation}\r\n+          lastIdx={idx === conversations.length - 1}\r\n+          emoji=\"ðŸ’¬\"\r\n+        />\r\n+      ))}\r\n+    </div>\r\n+  );\r\n };\r\n \r\n-export default useGetConversations;\n+export default Conversations;\r\n"
                },
                {
                    "date": 1738825116508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import useGetConversations from \"../src/zustand/useConversation\";\r\n+import Conversation from \"../components/Conversation\"; // âœ… Import the missing component\r\n \r\n const Conversations = () => {\r\n   const { conversations, loading } = useGetConversations();\r\n \r\n"
                },
                {
                    "date": 1738825621842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-import useGetConversations from \"../src/zustand/useConversation\";\r\n+import useGetConversations from \"../hooks/useGetConversations\"; // âœ… Correct import path\r\n import Conversation from \"../components/Conversation\"; // âœ… Import the missing component\r\n \r\n const Conversations = () => {\r\n   const { conversations, loading } = useGetConversations();\r\n"
                },
                {
                    "date": 1738825692185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,5 @@\n-import useGetConversations from \"../hooks/useGetConversations\"; // âœ… Correct import path\r\n-import Conversation from \"../components/Conversation\"; // âœ… Import the missing component\r\n+import useGetConversations from \"../../zustand/useGetConversations\"; // Adjust path if necessary\r\n \r\n const Conversations = () => {\r\n   const { conversations, loading } = useGetConversations();\r\n \r\n"
                },
                {
                    "date": 1738825713357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,37 @@\n-import useGetConversations from \"../../zustand/useGetConversations\"; // Adjust path if necessary\r\n+import { useState, useEffect } from \"react\";\r\n+import { toast } from \"react-toastify\";\r\n \r\n-const Conversations = () => {\r\n-  const { conversations, loading } = useGetConversations();\r\n+const useGetConversations = () => {\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [conversations, setConversations] = useState([]);\r\n \r\n-  if (loading) return <p>Loading...</p>;\r\n-  if (conversations.length === 0) return <p>No conversations found</p>;\r\n+  useEffect(() => {\r\n+    const getConversations = async () => {\r\n+      setLoading(true);\r\n+      try {\r\n+        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n+        const res = await fetch(\"/api/users\", {\r\n+          headers: {\r\n+            \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n+          },\r\n+        });\r\n+        const data = await res.json();\r\n+        console.log(\"API Response:\", data);\r\n+        if (data.error) {\r\n+          throw new Error(data.error);\r\n+        }\r\n+        setConversations(data);\r\n+      } catch (error) {\r\n+        toast.error(error.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n \r\n-  return (\r\n-    <div>\r\n-      {conversations.map((conversation, idx) => (\r\n-        <Conversation\r\n-          key={conversation._id}\r\n-          conversation={conversation}\r\n-          lastIdx={idx === conversations.length - 1}\r\n-          emoji=\"ðŸ’¬\"\r\n-        />\r\n-      ))}\r\n-    </div>\r\n-  );\r\n+    getConversations();\r\n+  }, []); // Added dependency array to prevent infinite re-renders\r\n+\r\n+  return { conversations, loading };\r\n };\r\n \r\n-export default Conversations;\r\n+export default useGetConversations;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738826019565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,24 @@\n-import { useState, useEffect } from \"react\";\r\n-import { toast } from \"react-toastify\";\r\n+import useGetConversations from \"../hooks/useGetConversations\"; // âœ… Correct import path\r\n+import Conversation from '../src/zustand/useConversation';\r\n \r\n-const useGetConversations = () => {\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [conversations, setConversations] = useState([]);\r\n+const Conversations = () => {\r\n+  const { conversations, loading } = useGetConversations();\r\n \r\n-  useEffect(() => {\r\n-    const getConversations = async () => {\r\n-      setLoading(true);\r\n-      try {\r\n-        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n-        const res = await fetch(\"/api/users\", {\r\n-          headers: {\r\n-            \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n-          },\r\n-        });\r\n-        const data = await res.json();\r\n-        console.log(\"API Response:\", data);\r\n-        if (data.error) {\r\n-          throw new Error(data.error);\r\n-        }\r\n-        setConversations(data);\r\n-      } catch (error) {\r\n-        toast.error(error.message);\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n+  if (loading) return <p>Loading...</p>;\r\n+  if (conversations.length === 0) return <p>No conversations found</p>;\r\n \r\n-    getConversations();\r\n\\ No newline at end of file\n-  }, []); // Added dependency array to prevent infinite re-renders\r\n-\r\n-  return { conversations, loading };\r\n+  return (\r\n+    <div>\r\n+      {conversations.map((conversation, idx) => (\r\n+        <Conversation\r\n+          key={conversation._id}\r\n+          conversation={conversation}\r\n+          lastIdx={idx === conversations.length - 1}\r\n+          emoji=\"ðŸ’¬\"\r\n+        />\r\n+      ))}\r\n+    </div>\r\n+  );\r\n };\r\n \r\n-export default useGetConversations;\n+export default Conversations;\r\n"
                },
                {
                    "date": 1738826792868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n-import useGetConversations from \"../hooks/useGetConversations\"; // âœ… Correct import path\r\n-import Conversation from '../src/zustand/useConversation';\r\n+import useGetConversations from \"../src/zustand/useConversation\";\r\n+import Conversation from \"../components/Conversation\"; \r\n \r\n const Conversations = () => {\r\n   const { conversations, loading } = useGetConversations();\r\n \r\n"
                },
                {
                    "date": 1738826903727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,24 +1,37 @@\n-import useGetConversations from \"../src/zustand/useConversation\";\r\n-import Conversation from \"../components/Conversation\"; \r\n+import { useState, useEffect } from \"react\";\r\n+import { toast } from \"react-toastify\";\r\n \r\n-const Conversations = () => {\r\n-  const { conversations, loading } = useGetConversations();\r\n+const useGetConversations = () => {\r\n+  const [loading, setLoading] = useState(false);\r\n+  const [conversations, setConversations] = useState([]);\r\n \r\n-  if (loading) return <p>Loading...</p>;\r\n-  if (conversations.length === 0) return <p>No conversations found</p>;\r\n+  useEffect(() => {\r\n+    const getConversations = async () => {\r\n+      setLoading(true);\r\n+      try {\r\n+        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n+        const res = await fetch(\"/api/users\", {\r\n+          headers: {\r\n+            \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n+          },\r\n+        });\r\n+        const data = await res.json();\r\n+        console.log(\"API Response:\", data);\r\n+        if (data.error) {\r\n+          throw new Error(data.error);\r\n+        }\r\n+        setConversations(data);\r\n+      } catch (error) {\r\n+        toast.error(error.message);\r\n+      } finally {\r\n+        setLoading(false);\r\n+      }\r\n+    };\r\n \r\n-  return (\r\n-    <div>\r\n-      {conversations.map((conversation, idx) => (\r\n-        <Conversation\r\n-          key={conversation._id}\r\n-          conversation={conversation}\r\n-          lastIdx={idx === conversations.length - 1}\r\n-          emoji=\"ðŸ’¬\"\r\n-        />\r\n-      ))}\r\n-    </div>\r\n-  );\r\n+    getConversations();\r\n+  }, []); // Added dependency array to prevent infinite re-renders\r\n+\r\n+  return { conversations, loading };\r\n };\r\n \r\n-export default Conversations;\r\n+export default useGetConversations;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738827313742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,49 @@\n import { useState, useEffect } from \"react\";\r\n-import { toast } from \"react-toastify\";\r\n+import useConversation from \"../zustand/useConversation\"; // Adjust the path based on your structure\r\n+import toast from \"react-hot-toast\";\r\n \r\n-const useGetConversations = () => {\r\n+const useGetMessages = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const [conversations, setConversations] = useState([]);\r\n+  const { messages, setMessages, selectedConversation } = useConversation();\r\n \r\n   useEffect(() => {\r\n-    const getConversations = async () => {\r\n+    if (!selectedConversation?.id) { // Safe check\r\n+      toast.error(\"No conversation selected!\");\r\n+      return;\r\n+    }\r\n+\r\n+    const getMessages = async () => {\r\n       setLoading(true);\r\n       try {\r\n-        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n-        const res = await fetch(\"/api/users\", {\r\n+        const token = localStorage.getItem(\"chat-user\")\r\n+          ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n+          : null;\r\n+\r\n+        const res = await fetch(`/api/messages/${selectedConversation.id}`, {\r\n           headers: {\r\n-            \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n+            Authorization: `Bearer ${token}`,\r\n+            \"Content-Type\": \"application/json\",\r\n           },\r\n         });\r\n+\r\n+        if (!res.ok) {\r\n+          throw new Error(\"Failed to fetch messages\");\r\n\\ No newline at end of file\n+        }\r\n+\r\n         const data = await res.json();\r\n-        console.log(\"API Response:\", data);\r\n-        if (data.error) {\r\n-          throw new Error(data.error);\r\n-        }\r\n-        setConversations(data);\r\n+        setMessages(data);\r\n       } catch (error) {\r\n         toast.error(error.message);\r\n+        console.error(\"Error fetching messages:\", error);\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n \r\n-    getConversations();\r\n-  }, []); // Added dependency array to prevent infinite re-renders\r\n+    getMessages();\r\n+  }, [selectedConversation?.id, setMessages]);\r\n \r\n-  return { conversations, loading };\r\n+  return { messages, loading };\r\n };\r\n \r\n-export default useGetConversations;\n+export default useGetMessages;\r\n"
                },
                {
                    "date": 1738827410085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useState, useEffect } from \"react\";\r\n-import useConversation from \"../zustand/useConversation\"; // Adjust the path based on your structure\r\n+import useConversation from \"../src/zustand/useConversation\"; // Adjust the path based on your structure\r\n import toast from \"react-hot-toast\";\r\n \r\n const useGetMessages = () => {\r\n   const [loading, setLoading] = useState(false);\r\n@@ -45,5 +45,5 @@\n \r\n   return { messages, loading };\r\n };\r\n \r\n-export default useGetMessages;\n\\ No newline at end of file\n+export default useGetMessages;\r\n"
                },
                {
                    "date": 1738827610246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useState, useEffect } from \"react\";\r\n-import useConversation from \"../src/zustand/useConversation\"; // Adjust the path based on your structure\r\n+import useConversation from \"../zustand/useConversation\"; // Adjust the path based on your structure\r\n import toast from \"react-hot-toast\";\r\n \r\n const useGetMessages = () => {\r\n   const [loading, setLoading] = useState(false);\r\n"
                },
                {
                    "date": 1738827656754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useState, useEffect } from \"react\";\r\n-import useConversation from \"../zustand/useConversation\"; // Adjust the path based on your structure\r\n+import useConversation from \"../src/zustand/useConversation\"; // Adjust the path based on your structure\r\n import toast from \"react-hot-toast\";\r\n \r\n const useGetMessages = () => {\r\n   const [loading, setLoading] = useState(false);\r\n"
                },
                {
                    "date": 1738827755315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useState, useEffect } from \"react\";\r\n-import useConversation from \"../src/zustand/useConversation\"; // Adjust the path based on your structure\r\n+import useConversation from '../src/zustand/useConversation.js';// Adjust the path based on your structure\r\n import toast from \"react-hot-toast\";\r\n \r\n const useGetMessages = () => {\r\n   const [loading, setLoading] = useState(false);\r\n"
                },
                {
                    "date": 1738828115498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,37 @@\n import { useState, useEffect } from \"react\";\r\n-import useConversation from '../src/zustand/useConversation.js';// Adjust the path based on your structure\r\n-import toast from \"react-hot-toast\";\r\n+import { toast } from \"react-toastify\";\r\n \r\n-const useGetMessages = () => {\r\n+const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const { messages, setMessages, selectedConversation } = useConversation();\r\n+  const [conversations, setConversations] = useState([]);\r\n \r\n   useEffect(() => {\r\n-    if (!selectedConversation?.id) { // Safe check\r\n-      toast.error(\"No conversation selected!\");\r\n-      return;\r\n-    }\r\n-\r\n-    const getMessages = async () => {\r\n+    const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n-        const token = localStorage.getItem(\"chat-user\")\r\n-          ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n-          : null;\r\n-\r\n-        const res = await fetch(`/api/messages/${selectedConversation.id}`, {\r\n+        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n+        const res = await fetch(\"/api/users\", {\r\n           headers: {\r\n-            Authorization: `Bearer ${token}`,\r\n-            \"Content-Type\": \"application/json\",\r\n+            \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n           },\r\n         });\r\n-\r\n-        if (!res.ok) {\r\n-          throw new Error(\"Failed to fetch messages\");\r\n+        const data = await res.json();\r\n+        console.log(\"API Response:\", data);\r\n+        if (data.error) {\r\n+          throw new Error(data.error);\r\n         }\r\n-\r\n-        const data = await res.json();\r\n-        setMessages(data);\r\n+        setConversations(data);\r\n       } catch (error) {\r\n         toast.error(error.message);\r\n-        console.error(\"Error fetching messages:\", error);\r\n       } finally {\r\n         setLoading(false);\r\n       }\r\n     };\r\n \r\n-    getMessages();\r\n-  }, [selectedConversation?.id, setMessages]);\r\n+    getConversations();\r\n+  }, []); // Added dependency array to prevent infinite re-renders\r\n \r\n-  return { messages, loading };\r\n+  return { conversations, loading };\r\n };\r\n \r\n-export default useGetMessages;\r\n+export default useGetConversations;\r\n"
                },
                {
                    "date": 1738830257204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,19 @@\n import { useState, useEffect } from \"react\";\r\n import { toast } from \"react-toastify\";\r\n+import useConversation from \"../zustand/useConversation\"; // Correct import\r\n \r\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const [conversations, setConversations] = useState([]);\r\n+  const { conversations, setConversations } = useConversation(); // Using the Zustand store\r\n \r\n   useEffect(() => {\r\n     const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n-        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n+        const token = localStorage.getItem(\"chat-user\")\r\n+          ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n+          : null;\r\n         const res = await fetch(\"/api/users\", {\r\n           headers: {\r\n             \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n           },\r\n@@ -19,9 +22,9 @@\n         console.log(\"API Response:\", data);\r\n         if (data.error) {\r\n           throw new Error(data.error);\r\n         }\r\n-        setConversations(data);\r\n+        setConversations(data); // Using setConversations from Zustand to update the state\r\n       } catch (error) {\r\n         toast.error(error.message);\r\n       } finally {\r\n         setLoading(false);\r\n"
                },
                {
                    "date": 1738830344823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { useState, useEffect } from \"react\";\r\n import { toast } from \"react-toastify\";\r\n-import useConversation from \"../zustand/useConversation\"; // Correct import\r\n+import useConversation from '../src/zustand/useConversation';\r\n \r\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n   const { conversations, setConversations } = useConversation(); // Using the Zustand store\r\n"
                },
                {
                    "date": 1738830971128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,16 @@\n import { useState, useEffect } from \"react\";\r\n import { toast } from \"react-toastify\";\r\n-import useConversation from '../src/zustand/useConversation';\r\n \r\n const useGetConversations = () => {\r\n   const [loading, setLoading] = useState(false);\r\n-  const { conversations, setConversations } = useConversation(); // Using the Zustand store\r\n+  const [conversations, setConversations] = useState([]);\r\n \r\n   useEffect(() => {\r\n     const getConversations = async () => {\r\n       setLoading(true);\r\n       try {\r\n-        const token = localStorage.getItem(\"chat-user\")\r\n-          ? JSON.parse(localStorage.getItem(\"chat-user\")).token\r\n-          : null;\r\n+        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n         const res = await fetch(\"/api/users\", {\r\n           headers: {\r\n             \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n           },\r\n@@ -22,9 +19,9 @@\n         console.log(\"API Response:\", data);\r\n         if (data.error) {\r\n           throw new Error(data.error);\r\n         }\r\n-        setConversations(data); // Using setConversations from Zustand to update the state\r\n+        setConversations(data);\r\n       } catch (error) {\r\n         toast.error(error.message);\r\n       } finally {\r\n         setLoading(false);\r\n@@ -36,5 +33,5 @@\n \r\n   return { conversations, loading };\r\n };\r\n \r\n-export default useGetConversations;\r\n+export default useGetConversations;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738838182468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,30 @@\n-import { useState, useEffect } from \"react\";\r\n-import { toast } from \"react-toastify\";\r\n+import { useEffect, useState } from \"react\";\r\n+import toast from \"react-hot-toast\";\r\n \r\n const useGetConversations = () => {\r\n-  const [loading, setLoading] = useState(false);\r\n-  const [conversations, setConversations] = useState([]);\r\n+\tconst [loading, setLoading] = useState(false);\r\n+\tconst [conversations, setConversations] = useState([]);\r\n \r\n-  useEffect(() => {\r\n-    const getConversations = async () => {\r\n-      setLoading(true);\r\n-      try {\r\n-        const token = localStorage.getItem(\"chat-user\") ? JSON.parse(localStorage.getItem(\"chat-user\")).token : null;\r\n-        const res = await fetch(\"/api/users\", {\r\n-          headers: {\r\n-            \"Authorization\": `Bearer ${token}`, // Include the token in the headers\r\n-          },\r\n-        });\r\n-        const data = await res.json();\r\n-        console.log(\"API Response:\", data);\r\n-        if (data.error) {\r\n-          throw new Error(data.error);\r\n-        }\r\n-        setConversations(data);\r\n-      } catch (error) {\r\n-        toast.error(error.message);\r\n-      } finally {\r\n-        setLoading(false);\r\n-      }\r\n-    };\r\n+\tuseEffect(() => {\r\n+\t\tconst getConversations = async () => {\r\n+\t\t\tsetLoading(true);\r\n+\t\t\ttry {\r\n+\t\t\t\tconst res = await fetch(\"/api/users\");\r\n+\t\t\t\tconst data = await res.json();\r\n+\t\t\t\tif (data.error) {\r\n+\t\t\t\t\tthrow new Error(data.error);\r\n+\t\t\t\t}\r\n+\t\t\t\tsetConversations(data);\r\n+\t\t\t} catch (error) {\r\n+\t\t\t\ttoast.error(error.message);\r\n+\t\t\t} finally {\r\n+\t\t\t\tsetLoading(false);\r\n+\t\t\t}\r\n+\t\t};\r\n \r\n-    getConversations();\r\n-  }, []); // Added dependency array to prevent infinite re-renders\r\n+\t\tgetConversations();\r\n+\t}, []);\r\n \r\n-  return { conversations, loading };\r\n+\treturn { loading, conversations };\r\n };\r\n-\r\n export default useGetConversations;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738839420797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,12 @@\n import { useEffect, useState } from \"react\";\r\n+import useConversation from \"../zustand/useConversation\"; // Importing the useConversation hook\r\n import toast from \"react-hot-toast\";\r\n \r\n const useGetConversations = () => {\r\n \tconst [loading, setLoading] = useState(false);\r\n \tconst [conversations, setConversations] = useState([]);\r\n+\tconst { conversationData, setConversation } = useConversation(); // Using useConversation\r\n \r\n \tuseEffect(() => {\r\n \t\tconst getConversations = async () => {\r\n \t\t\tsetLoading(true);\r\n@@ -14,17 +16,21 @@\n \t\t\t\tif (data.error) {\r\n \t\t\t\t\tthrow new Error(data.error);\r\n \t\t\t\t}\r\n \t\t\t\tsetConversations(data);\r\n+\t\t\t\tsetConversation(data); // Storing conversations using useConversation hook (assuming it has setConversation function)\r\n \t\t\t} catch (error) {\r\n \t\t\t\ttoast.error(error.message);\r\n \t\t\t} finally {\r\n \t\t\t\tsetLoading(false);\r\n \t\t\t}\r\n \t\t};\r\n \r\n \t\tgetConversations();\r\n-\t}, []);\r\n+\t}, [setConversation]);\r\n \r\n-\treturn { loading, conversations };\r\n\\ No newline at end of file\n+\t// You can use both `conversations` and `conversationData` here\r\n+\t// For example, if you want to return them both:\r\n+\treturn { loading, conversations, conversationData };\r\n };\r\n-export default useGetConversations;\n+\r\n+export default useGetConversations;\r\n"
                },
                {
                    "date": 1738839818250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import { useEffect, useState } from \"react\";\r\n-import useConversation from \"../zustand/useConversation\"; // Importing the useConversation hook\r\n+import useConversation from \"../src/zustand/useConversation\"; // Adjust path accordingly\r\n import toast from \"react-hot-toast\";\r\n \r\n const useGetConversations = () => {\r\n \tconst [loading, setLoading] = useState(false);\r\n"
                }
            ],
            "date": 1738565235964,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from \"react\";\r\nimport { toast } from \"react-toastify\"; // Ensure you have react-toastify installed\r\n\r\nconst useGetConversations = () => {\r\n  const [loading, setLoading] = useState(false);\r\n  const [conversations, setConversations] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const getConversations = async () => {\r\n      setLoading(true);\r\n      try {\r\n        const res = await fetch(\"/api/users\");\r\n        const data = await res.json();\r\n        if (data.error) {\r\n          throw new Error(data.error);\r\n        }\r\n        setConversations(data);\r\n      } catch (error) {\r\n        toast.error(error.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    getConversations();\r\n  }, []); // Added dependency array to prevent infinite re-renders\r\n\r\n  return { conversations, loading };\r\n};\r\n\r\nexport default useGetConversations;\r\n"
        }
    ]
}