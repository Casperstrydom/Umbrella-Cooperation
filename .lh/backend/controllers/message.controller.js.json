{
    "sourceFile": "backend/controllers/message.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1738103491882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738132808942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,69 +1,5 @@\n-import Conversation from \"../models/conversation.model.js\";\r\n-import Message from \"../models/message.model.js\";\r\n-import { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n+import router from \"../routes/auth.routes\";\r\n \r\n export const sendMessage = async (req, res) => {\r\n-\ttry {\r\n-\t\tconst { message } = req.body;\r\n-\t\tconst { id: receiverId } = req.params;\r\n-\t\tconst senderId = req.user._id;\r\n-\r\n-\t\tlet conversation = await Conversation.findOne({\r\n-\t\t\tparticipants: { $all: [senderId, receiverId] },\r\n-\t\t});\r\n-\r\n-\t\tif (!conversation) {\r\n-\t\t\tconversation = await Conversation.create({\r\n-\t\t\t\tparticipants: [senderId, receiverId],\r\n-\t\t\t});\r\n-\t\t}\r\n-\r\n-\t\tconst newMessage = new Message({\r\n-\t\t\tsenderId,\r\n-\t\t\treceiverId,\r\n-\t\t\tmessage,\r\n-\t\t});\r\n-\r\n-\t\tif (newMessage) {\r\n-\t\t\tconversation.messages.push(newMessage._id);\r\n-\t\t}\r\n-\r\n-\t\t// await conversation.save();\r\n-\t\t// await newMessage.save();\r\n-\r\n-\t\t// this will run in parallel\r\n-\t\tawait Promise.all([conversation.save(), newMessage.save()]);\r\n-\r\n-\t\t// SOCKET IO FUNCTIONALITY WILL GO HERE\r\n-\t\tconst receiverSocketId = getReceiverSocketId(receiverId);\r\n-\t\tif (receiverSocketId) {\r\n-\t\t\t// io.to(<socket_id>).emit() used to send events to specific client\r\n-\t\t\tio.to(receiverSocketId).emit(\"newMessage\", newMessage);\r\n-\t\t}\r\n-\r\n-\t\tres.status(201).json(newMessage);\r\n-\t} catch (error) {\r\n-\t\tconsole.log(\"Error in sendMessage controller: \", error.message);\r\n-\t\tres.status(500).json({ error: \"Internal server error\" });\r\n-\t}\r\n+    console.log('message send');\r\n };\r\n-\r\n-export const getMessages = async (req, res) => {\r\n-\ttry {\r\n-\t\tconst { id: userToChatId } = req.params;\r\n-\t\tconst senderId = req.user._id;\r\n-\r\n-\t\tconst conversation = await Conversation.findOne({\r\n-\t\t\tparticipants: { $all: [senderId, userToChatId] },\r\n-\t\t}).populate(\"messages\"); // NOT REFERENCE BUT ACTUAL MESSAGES\r\n-\r\n-\t\tif (!conversation) return res.status(200).json([]);\r\n-\r\n-\t\tconst messages = conversation.messages;\r\n-\r\n-\t\tres.status(200).json(messages);\r\n-\t} catch (error) {\r\n-\t\tconsole.log(\"Error in getMessages controller: \", error.message);\r\n-\t\tres.status(500).json({ error: \"Internal server error\" });\r\n\\ No newline at end of file\n-\t}\r\n-};\n"
                },
                {
                    "date": 1738133100733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n import router from \"../routes/auth.routes\";\r\n \r\n export const sendMessage = async (req, res) => {\r\n-    console.log('message send');\r\n+    console.log('message sent');\r\n };\r\n"
                },
                {
                    "date": 1738134016664,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,4 @@\n-import router from \"../routes/auth.routes\";\r\n \r\n export const sendMessage = async (req, res) => {\r\n     console.log('message sent');\r\n };\r\n"
                },
                {
                    "date": 1738134191552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,4 @@\n \r\n export const sendMessage = async (req, res) => {\r\n-    console.log('message sent');\r\n+    console.log('message sent', req.params.id);\r\n };\r\n"
                },
                {
                    "date": 1738134350662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,8 @@\n \r\n export const sendMessage = async (req, res) => {\r\n-    console.log('message sent', req.params.id);\r\n+    try {\r\n+        \r\n+    } catch (error) {\r\n+        res.status(500).json({ error: 'Internal Server' });\r\n+    }\r\n };\r\n"
                },
                {
                    "date": 1738134371674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,7 @@\n export const sendMessage = async (req, res) => {\r\n     try {\r\n         \r\n     } catch (error) {\r\n-        res.status(500).json({ error: 'Internal Server' });\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n"
                },
                {
                    "date": 1738134422082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,8 @@\n export const sendMessage = async (req, res) => {\r\n     try {\r\n         \r\n     } catch (error) {\r\n+        console.log('Error in sendMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n"
                },
                {
                    "date": 1738134650208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n \r\n export const sendMessage = async (req, res) => {\r\n     try {\r\n-        \r\n+        const {message} = req.body;\r\n+        const {id} = req.params;\r\n+        const {senderId} = req.userId;\r\n     } catch (error) {\r\n         console.log('Error in sendMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n"
                },
                {
                    "date": 1738136203882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n export const sendMessage = async (req, res) => {\r\n     try {\r\n         const {message} = req.body;\r\n         const {id} = req.params;\r\n-        const {senderId} = req.userId;\r\n+        const {senderId} = req.user_id;\r\n     } catch (error) {\r\n         console.log('Error in sendMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n"
                },
                {
                    "date": 1738137095178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,34 @@\n+import Conversation from '../models/conversation.model.js';\r\n \r\n export const sendMessage = async (req, res) => {\r\n     try {\r\n         const {message} = req.body;\r\n         const {id} = req.params;\r\n         const {senderId} = req.user_id;\r\n+\r\n+        let conversation = await Conversation.findOne({\r\n+            participants: {$all: [senderId, receiverId] },\r\n+        })\r\n+\r\n+        if(!conversation) {\r\n+            conversation = await Conversation.create({\r\n+                participants: [senderId, receiverId],\r\n+            });\r\n+        }\r\n+\r\n+        const newMessage = new Messages({\r\n+            senderId,\r\n+            receiverId,\r\n+            message,\r\n+        });\r\n+\r\n+        if(newMessage) {\r\n+            conversation.messages.push(newMessage);\r\n+        }\r\n+\r\n+        res.status(201).json(newMessage);\r\n+\r\n     } catch (error) {\r\n         console.log('Error in sendMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n"
                },
                {
                    "date": 1738138272834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,34 +1,46 @@\n import Conversation from '../models/conversation.model.js';\r\n+import Message from '../models/message.model.js';  // Assuming this is the correct model for messages\r\n \r\n export const sendMessage = async (req, res) => {\r\n     try {\r\n-        const {message} = req.body;\r\n-        const {id} = req.params;\r\n-        const {senderId} = req.user_id;\r\n+        const { message } = req.body;  // Extract message from request body\r\n+        const { id: receiverId } = req.params;  // Extract receiverId from route parameter\r\n+        const senderId = req.user_id;  // Use user ID from the middleware (already set by protectRoute)\r\n \r\n+        if (!receiverId || !message) {\r\n+            return res.status(400).json({ error: 'Missing receiverId or message content' });\r\n+        }\r\n+\r\n+        // Find an existing conversation between sender and receiver\r\n         let conversation = await Conversation.findOne({\r\n-            participants: {$all: [senderId, receiverId] },\r\n-        })\r\n+            participants: { $all: [senderId, receiverId] },\r\n+        });\r\n \r\n-        if(!conversation) {\r\n+        // If no conversation exists, create a new one\r\n+        if (!conversation) {\r\n             conversation = await Conversation.create({\r\n                 participants: [senderId, receiverId],\r\n             });\r\n         }\r\n \r\n-        const newMessage = new Messages({\r\n+        // Create a new message and add it to the conversation\r\n+        const newMessage = new Message({\r\n             senderId,\r\n             receiverId,\r\n             message,\r\n         });\r\n \r\n-        if(newMessage) {\r\n-            conversation.messages.push(newMessage);\r\n-        }\r\n+        await newMessage.save();  // Save the new message to the database\r\n \r\n-        res.status(201).json(newMessage);\r\n+        // Add the new message to the conversation's messages array\r\n+        conversation.messages.push(newMessage._id);\r\n \r\n+        // Save the updated conversation\r\n+        await conversation.save();\r\n+\r\n+        res.status(201).json({ message: 'Message sent successfully', data: newMessage });\r\n+\r\n     } catch (error) {\r\n         console.log('Error in sendMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n"
                },
                {
                    "date": 1738138592448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,15 +29,16 @@\n             receiverId,\r\n             message,\r\n         });\r\n \r\n-        await newMessage.save();  // Save the new message to the database\r\n+        // Save the updated conversation\r\n+        await conversation.save();\r\n+        // Save the new message to the database\r\n+        await newMessage.save();  \r\n \r\n         // Add the new message to the conversation's messages array\r\n         conversation.messages.push(newMessage._id);\r\n \r\n-        // Save the updated conversation\r\n-        await conversation.save();\r\n \r\n         res.status(201).json({ message: 'Message sent successfully', data: newMessage });\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1738138811238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,17 +29,21 @@\n             receiverId,\r\n             message,\r\n         });\r\n \r\n-        // Save the updated conversation\r\n-        await conversation.save();\r\n-        // Save the new message to the database\r\n-        await newMessage.save();  \r\n \r\n+\r\n+        if(newMessage) {\r\n         // Add the new message to the conversation's messages array\r\n         conversation.messages.push(newMessage._id);\r\n \r\n+        } \r\n \r\n+        //this will run in parallel\r\n+        await Promise.all([conversation.save(), newMessage.save()]);\r\n+\r\n+        \r\n+\r\n         res.status(201).json({ message: 'Message sent successfully', data: newMessage });\r\n \r\n     } catch (error) {\r\n         console.log('Error in sendMessage controller:', error.message);\r\n"
                },
                {
                    "date": 1738138954188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,16 +29,16 @@\n             receiverId,\r\n             message,\r\n         });\r\n \r\n-\r\n-\r\n         if(newMessage) {\r\n         // Add the new message to the conversation's messages array\r\n         conversation.messages.push(newMessage._id);\r\n \r\n         } \r\n \r\n+        //SOCKET IO FUNCTIONALITY WILL GO HERE\r\n+\r\n         //this will run in parallel\r\n         await Promise.all([conversation.save(), newMessage.save()]);\r\n \r\n         \r\n"
                },
                {
                    "date": 1738140412643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,4 +49,23 @@\n         console.log('Error in sendMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n+\r\n+export const getMessages = async (req, res) => {\r\n+    try {\r\n+\r\n+    const {id: userToChatId}= req.params;\r\n+    const userId = req.user_id;\r\n+\r\n+    const conversation = await Conversation.findOne({\r\n+        participants: { $all: [senderId, userToChatId] },\r\n+\r\n+    }).populate('messages');\r\n+\r\n+    res.status(200).json({data: conversation.messages});\r\n+\r\n+    } catch (error) {\r\n+        console.log('Error in getMessage controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n+    }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738140675396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n import Conversation from '../models/conversation.model.js';\r\n-import Message from '../models/message.model.js';  // Assuming this is the correct model for messages\r\n+import Message from '../models/message.model.js';\r\n \r\n export const sendMessage = async (req, res) => {\r\n     try {\r\n-        const { message } = req.body;  // Extract message from request body\r\n-        const { id: receiverId } = req.params;  // Extract receiverId from route parameter\r\n-        const senderId = req.user_id;  // Use user ID from the middleware (already set by protectRoute)\r\n+        const { message } = req.body;\r\n+        const { id: receiverId } = req.params;\r\n+        const senderId = req.user_id;\r\n \r\n         if (!receiverId || !message) {\r\n             return res.status(400).json({ error: 'Missing receiverId or message content' });\r\n         }\r\n@@ -29,43 +29,37 @@\n             receiverId,\r\n             message,\r\n         });\r\n \r\n-        if(newMessage) {\r\n+        // Save the new message and update the conversation\r\n+        await Promise.all([conversation.save(), newMessage.save()]);\r\n+\r\n         // Add the new message to the conversation's messages array\r\n         conversation.messages.push(newMessage._id);\r\n \r\n-        } \r\n-\r\n-        //SOCKET IO FUNCTIONALITY WILL GO HERE\r\n-\r\n-        //this will run in parallel\r\n-        await Promise.all([conversation.save(), newMessage.save()]);\r\n-\r\n-        \r\n-\r\n         res.status(201).json({ message: 'Message sent successfully', data: newMessage });\r\n-\r\n     } catch (error) {\r\n         console.log('Error in sendMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n \r\n export const getMessages = async (req, res) => {\r\n     try {\r\n+        const { id: userToChatId } = req.params; // Extract receiver ID from route params\r\n+        const userId = req.user_id;  // Use user ID from the middleware\r\n \r\n-    const {id: userToChatId}= req.params;\r\n-    const userId = req.user_id;\r\n+        // Find the conversation between the sender and the receiver\r\n+        const conversation = await Conversation.findOne({\r\n+            participants: { $all: [userId, userToChatId] },  // Use userId and receiver's ID to find the conversation\r\n+        }).populate('messages');\r\n \r\n-    const conversation = await Conversation.findOne({\r\n-        participants: { $all: [senderId, userToChatId] },\r\n+        if (!conversation) {\r\n\\ No newline at end of file\n+            return res.status(404).json({ error: 'Conversation not found' });\r\n+        }\r\n \r\n-    }).populate('messages');\r\n-\r\n-    res.status(200).json({data: conversation.messages});\r\n-\r\n+        res.status(200).json({ data: conversation.messages });  // Return the messages\r\n     } catch (error) {\r\n         console.log('Error in getMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n-};\n+};\r\n"
                },
                {
                    "date": 1738141463121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,16 +50,16 @@\n \r\n         // Find the conversation between the sender and the receiver\r\n         const conversation = await Conversation.findOne({\r\n             participants: { $all: [userId, userToChatId] },  // Use userId and receiver's ID to find the conversation\r\n-        }).populate('messages');\r\n+        }).populate('messages');  // NOT REFERENCE BUT ACTUAL MESSAGES\r\n \r\n-        if (!conversation) {\r\n-            return res.status(404).json({ error: 'Conversation not found' });\r\n-        }\r\n+        if (!conversation) return response.status(200).json([]);  // Return an empty array if no conversation exists\r\n \r\n-        res.status(200).json({ data: conversation.messages });  // Return the messages\r\n+        const messages = conversation.messages;  // Extract messages from the conversation\r\n+\r\n+        res.status(200).json(messages);  // Return the messages\r\n\\ No newline at end of file\n     } catch (error) {\r\n         console.log('Error in getMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n-};\n+};\r\n"
                },
                {
                    "date": 1738142724189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,28 +22,32 @@\n                 participants: [senderId, receiverId],\r\n             });\r\n         }\r\n \r\n-        // Create a new message and add it to the conversation\r\n+        // Create a new message\r\n         const newMessage = new Message({\r\n             senderId,\r\n             receiverId,\r\n             message,\r\n         });\r\n \r\n-        // Save the new message and update the conversation\r\n-        await Promise.all([conversation.save(), newMessage.save()]);\r\n+        // Save the new message first\r\n+        await newMessage.save();\r\n \r\n         // Add the new message to the conversation's messages array\r\n         conversation.messages.push(newMessage._id);\r\n \r\n+        // Save the updated conversation with the new message ID\r\n+        await conversation.save();\r\n+\r\n         res.status(201).json({ message: 'Message sent successfully', data: newMessage });\r\n     } catch (error) {\r\n         console.log('Error in sendMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n \r\n+\r\n export const getMessages = async (req, res) => {\r\n     try {\r\n         const { id: userToChatId } = req.params; // Extract receiver ID from route params\r\n         const userId = req.user_id;  // Use user ID from the middleware\r\n@@ -61,5 +65,5 @@\n     } catch (error) {\r\n         console.log('Error in getMessage controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n-};\n\\ No newline at end of file\n+};\r\n"
                }
            ],
            "date": 1738103491882,
            "name": "Commit-0",
            "content": "import Conversation from \"../models/conversation.model.js\";\r\nimport Message from \"../models/message.model.js\";\r\nimport { getReceiverSocketId, io } from \"../socket/socket.js\";\r\n\r\nexport const sendMessage = async (req, res) => {\r\n\ttry {\r\n\t\tconst { message } = req.body;\r\n\t\tconst { id: receiverId } = req.params;\r\n\t\tconst senderId = req.user._id;\r\n\r\n\t\tlet conversation = await Conversation.findOne({\r\n\t\t\tparticipants: { $all: [senderId, receiverId] },\r\n\t\t});\r\n\r\n\t\tif (!conversation) {\r\n\t\t\tconversation = await Conversation.create({\r\n\t\t\t\tparticipants: [senderId, receiverId],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst newMessage = new Message({\r\n\t\t\tsenderId,\r\n\t\t\treceiverId,\r\n\t\t\tmessage,\r\n\t\t});\r\n\r\n\t\tif (newMessage) {\r\n\t\t\tconversation.messages.push(newMessage._id);\r\n\t\t}\r\n\r\n\t\t// await conversation.save();\r\n\t\t// await newMessage.save();\r\n\r\n\t\t// this will run in parallel\r\n\t\tawait Promise.all([conversation.save(), newMessage.save()]);\r\n\r\n\t\t// SOCKET IO FUNCTIONALITY WILL GO HERE\r\n\t\tconst receiverSocketId = getReceiverSocketId(receiverId);\r\n\t\tif (receiverSocketId) {\r\n\t\t\t// io.to(<socket_id>).emit() used to send events to specific client\r\n\t\t\tio.to(receiverSocketId).emit(\"newMessage\", newMessage);\r\n\t\t}\r\n\r\n\t\tres.status(201).json(newMessage);\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in sendMessage controller: \", error.message);\r\n\t\tres.status(500).json({ error: \"Internal server error\" });\r\n\t}\r\n};\r\n\r\nexport const getMessages = async (req, res) => {\r\n\ttry {\r\n\t\tconst { id: userToChatId } = req.params;\r\n\t\tconst senderId = req.user._id;\r\n\r\n\t\tconst conversation = await Conversation.findOne({\r\n\t\t\tparticipants: { $all: [senderId, userToChatId] },\r\n\t\t}).populate(\"messages\"); // NOT REFERENCE BUT ACTUAL MESSAGES\r\n\r\n\t\tif (!conversation) return res.status(200).json([]);\r\n\r\n\t\tconst messages = conversation.messages;\r\n\r\n\t\tres.status(200).json(messages);\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in getMessages controller: \", error.message);\r\n\t\tres.status(500).json({ error: \"Internal server error\" });\r\n\t}\r\n};"
        }
    ]
}