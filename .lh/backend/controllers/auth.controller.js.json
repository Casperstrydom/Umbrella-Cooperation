{
    "sourceFile": "backend/controllers/auth.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 65,
            "patches": [
                {
                    "date": 1738103586373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738104252648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,88 +1,47 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import User from '../models/user.model.js';\r\n+export const signup = async(req, res) => {\r\n+    try{\r\n+     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n+       if(password !== confirmPassword) {\r\n+           return res.status(400).json({message: 'Passwords do not match'});\r\n+       }\r\n+       const user = await User.findOne({username}); \r\n+         if(user) {\r\n+              return res.status(400).json({message: 'User already exists'});\r\n+         };\r\n+         //HASH PASSWORD HERE\r\n+         \r\n+         // https://avatar-placeholder.iran.liara.run/\r\n \r\n-export const signup = async (req, res) => {\r\n-\ttry {\r\n-\t\tconst { fullName, username, password, confirmPassword, gender } = req.body;\r\n+         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n+         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n \r\n-\t\tif (password !== confirmPassword) {\r\n-\t\t\treturn res.status(400).json({ error: \"Passwords don't match\" });\r\n-\t\t}\r\n-\r\n-\t\tconst user = await User.findOne({ username });\r\n-\r\n-\t\tif (user) {\r\n-\t\t\treturn res.status(400).json({ error: \"Username already exists\" });\r\n-\t\t}\r\n-\r\n-\t\t// HASH PASSWORD HERE\r\n-\t\tconst salt = await bcrypt.genSalt(10);\r\n-\t\tconst hashedPassword = await bcrypt.hash(password, salt);\r\n-\r\n-\t\t// https://avatar-placeholder.iran.liara.run/\r\n-\r\n-\t\tconst boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-\t\tconst girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-\t\tconst newUser = new User({\r\n-\t\t\tfullName,\r\n-\t\t\tusername,\r\n-\t\t\tpassword: hashedPassword,\r\n-\t\t\tgender,\r\n-\t\t\tprofilePic: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n-\t\t});\r\n-\r\n-\t\tif (newUser) {\r\n-\t\t\t// Generate JWT token here\r\n-\t\t\tgenerateTokenAndSetCookie(newUser._id, res);\r\n-\t\t\tawait newUser.save();\r\n-\r\n-\t\t\tres.status(201).json({\r\n-\t\t\t\t_id: newUser._id,\r\n-\t\t\t\tfullName: newUser.fullName,\r\n-\t\t\t\tusername: newUser.username,\r\n-\t\t\t\tprofilePic: newUser.profilePic,\r\n-\t\t\t});\r\n-\t\t} else {\r\n-\t\t\tres.status(400).json({ error: \"Invalid user data\" });\r\n-\t\t}\r\n-\t} catch (error) {\r\n-\t\tconsole.log(\"Error in signup controller\", error.message);\r\n-\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n-\t}\r\n+         const newUser = new User({\r\n+            fullName,\r\n+            username,\r\n+            password,\r\n+            gender,\r\n+            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n+         })\r\n+         await newUser.save();\r\n+         res.status(201).json({\r\n+            _id: newUser._id,\r\n+            fullName: newUser.fullName,\r\n+            username: newUser.username,\r\n+            profilePic: newUser.profilePic,\r\n+         });\r\n+    } catch(error) {\r\n+        console.log('Error in signup controller', error.message);\r\n+        res.status(500).json({error: 'Internal Server Error'});\r\n+    }\r\n };\r\n\\ No newline at end of file\n \r\n-export const login = async (req, res) => {\r\n-\ttry {\r\n-\t\tconst { username, password } = req.body;\r\n-\t\tconst user = await User.findOne({ username });\r\n-\t\tconst isPasswordCorrect = await bcrypt.compare(password, user?.password || \"\");\r\n-\r\n-\t\tif (!user || !isPasswordCorrect) {\r\n-\t\t\treturn res.status(400).json({ error: \"Invalid username or password\" });\r\n-\t\t}\r\n-\r\n-\t\tgenerateTokenAndSetCookie(user._id, res);\r\n-\r\n-\t\tres.status(200).json({\r\n-\t\t\t_id: user._id,\r\n-\t\t\tfullName: user.fullName,\r\n-\t\t\tusername: user.username,\r\n-\t\t\tprofilePic: user.profilePic,\r\n-\t\t});\r\n-\t} catch (error) {\r\n-\t\tconsole.log(\"Error in login controller\", error.message);\r\n-\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n-\t}\r\n+export const login = (req, res) => {\r\n+    console.log('loginUser');\r\n+    res.send('Login route');\r\n };\r\n \r\n export const logout = (req, res) => {\r\n-\ttry {\r\n-\t\tres.cookie(\"jwt\", \"\", { maxAge: 0 });\r\n-\t\tres.status(200).json({ message: \"Logged out successfully\" });\r\n-\t} catch (error) {\r\n-\t\tconsole.log(\"Error in logout controller\", error.message);\r\n-\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n-\t}\r\n-};\n+    console.log('logoutUser');\r\n+    res.send('Logout route');\r\n+};\r\n"
                },
                {
                    "date": 1738104770119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,55 @@\n import User from '../models/user.model.js';\r\n-export const signup = async(req, res) => {\r\n-    try{\r\n-     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n-       if(password !== confirmPassword) {\r\n-           return res.status(400).json({message: 'Passwords do not match'});\r\n-       }\r\n-       const user = await User.findOne({username}); \r\n-         if(user) {\r\n-              return res.status(400).json({message: 'User already exists'});\r\n-         };\r\n-         //HASH PASSWORD HERE\r\n-         \r\n-         // https://avatar-placeholder.iran.liara.run/\r\n \r\n-         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n-         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n+export const signup = async (req, res) => {\r\n+    try {\r\n+        let { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-         const newUser = new User({\r\n+        // Check if passwords match\r\n+        if (password !== confirmPassword) {\r\n+            return res.status(400).json({ message: 'Passwords do not match' });\r\n+        }\r\n+\r\n+        // Check if user already exists\r\n+        const existingUser = await User.findOne({ username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: 'User already exists' });\r\n+        }\r\n+\r\n+        // Normalize gender to match enum values in the schema\r\n+        gender = gender.charAt(0).toUpperCase() + gender.slice(1).toLowerCase();\r\n+\r\n+        // Set default profile pictures based on gender\r\n+        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+        const profilePic = gender === 'Male' ? boyProfilePic : girlProfilePic;\r\n+\r\n+        // Create a new user\r\n+        const newUser = new User({\r\n             fullName,\r\n             username,\r\n             password,\r\n             gender,\r\n-            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n-         })\r\n-         await newUser.save();\r\n-         res.status(201).json({\r\n+            profilePicture: profilePic,\r\n+        });\r\n+\r\n+        await newUser.save();\r\n+\r\n+        // Respond with user details\r\n+        res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePic: newUser.profilePic,\r\n-         });\r\n-    } catch(error) {\r\n-        console.log('Error in signup controller', error.message);\r\n-        res.status(500).json({error: 'Internal Server Error'});\r\n+            profilePicture: newUser.profilePicture,\r\n+        });\r\n+          //HASH PASSWORD HERE\r\n+         \r\n+         // https://avatar-placeholder.iran.liara.run/\r\n+\r\n+    } catch (error) {\r\n+        console.error('Error in signup controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n \r\n export const login = (req, res) => {\r\n@@ -43,5 +59,5 @@\n \r\n export const logout = (req, res) => {\r\n     console.log('logoutUser');\r\n     res.send('Logout route');\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1738104982548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,39 @@\n import User from '../models/user.model.js';\r\n+export const signup = async(req, res) => {\r\n+    try{\r\n+     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n+       if(password !== confirmPassword) {\r\n+           return res.status(400).json({message: 'Passwords do not match'});\r\n+       }\r\n+       const user = await User.findOne({username}); \r\n+         if(user) {\r\n+              return res.status(400).json({message: 'User already exists'});\r\n+         };\r\n+         //HASH PASSWORD HERE\r\n+         \r\n+         // https://avatar-placeholder.iran.liara.run/\r\n \r\n-export const signup = async (req, res) => {\r\n-    try {\r\n-        let { fullName, username, password, confirmPassword, gender } = req.body;\r\n+         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n+         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n \r\n-        // Check if passwords match\r\n-        if (password !== confirmPassword) {\r\n-            return res.status(400).json({ message: 'Passwords do not match' });\r\n-        }\r\n-\r\n-        // Check if user already exists\r\n-        const existingUser = await User.findOne({ username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ message: 'User already exists' });\r\n-        }\r\n-\r\n-        // Normalize gender to match enum values in the schema\r\n-        gender = gender.charAt(0).toUpperCase() + gender.slice(1).toLowerCase();\r\n-\r\n-        // Set default profile pictures based on gender\r\n-        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-        const profilePic = gender === 'Male' ? boyProfilePic : girlProfilePic;\r\n-\r\n-        // Create a new user\r\n-        const newUser = new User({\r\n+         const newUser = new User({\r\n             fullName,\r\n             username,\r\n             password,\r\n             gender,\r\n-            profilePicture: profilePic,\r\n-        });\r\n-\r\n-        await newUser.save();\r\n-\r\n-        // Respond with user details\r\n-        res.status(201).json({\r\n+            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n+         })\r\n+         await newUser.save();\r\n+         res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePicture: newUser.profilePicture,\r\n-        });\r\n-          //HASH PASSWORD HERE\r\n-         \r\n-         // https://avatar-placeholder.iran.liara.run/\r\n-\r\n-    } catch (error) {\r\n-        console.error('Error in signup controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n+            profilePic: newUser.profilePic,\r\n+         });\r\n+    } catch(error) {\r\n+        console.log('Error in signup controller', error.message);\r\n+        res.status(500).json({error: 'Internal Server Error'});\r\n     }\r\n };\r\n \r\n export const login = (req, res) => {\r\n"
                },
                {
                    "date": 1738105617580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n+import bcrypt from 'bcryptjs';\r\n import User from '../models/user.model.js';\r\n+\r\n+\r\n export const signup = async(req, res) => {\r\n     try{\r\n      const {fullName,username,password,confirmPassword,gender}= req.body;\r\n        if(password !== confirmPassword) {\r\n@@ -9,18 +12,19 @@\n          if(user) {\r\n               return res.status(400).json({message: 'User already exists'});\r\n          };\r\n          //HASH PASSWORD HERE\r\n-         \r\n+         const salt = await bcryptjs.genSalt(10);\r\n+            const hashedPassword = await bcryptjs.hash(password, salt);\r\n          // https://avatar-placeholder.iran.liara.run/\r\n \r\n          const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n          const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n \r\n          const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password,\r\n+            password: hashedPassword,\r\n             gender,\r\n             profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n          })\r\n          await newUser.save();\r\n"
                },
                {
                    "date": 1738105830952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,47 @@\n import bcrypt from 'bcryptjs';\r\n import User from '../models/user.model.js';\r\n \r\n+export const signup = async (req, res) => {\r\n+    try {\r\n+        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-export const signup = async(req, res) => {\r\n-    try{\r\n-     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n-       if(password !== confirmPassword) {\r\n-           return res.status(400).json({message: 'Passwords do not match'});\r\n-       }\r\n-       const user = await User.findOne({username}); \r\n-         if(user) {\r\n-              return res.status(400).json({message: 'User already exists'});\r\n-         };\r\n-         //HASH PASSWORD HERE\r\n-         const salt = await bcryptjs.genSalt(10);\r\n-            const hashedPassword = await bcryptjs.hash(password, salt);\r\n-         // https://avatar-placeholder.iran.liara.run/\r\n+        // Validate passwords\r\n+        if (password !== confirmPassword) {\r\n+            return res.status(400).json({ message: 'Passwords do not match' });\r\n+        }\r\n \r\n-         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n-         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n+        // Check if user already exists\r\n+        const existingUser = await User.findOne({ username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: 'User already exists' });\r\n+        }\r\n \r\n-         const newUser = new User({\r\n+        // Hash password\r\n+        const salt = await bcrypt.genSalt(10);\r\n+        const hashedPassword = await bcrypt.hash(password, salt);\r\n+\r\n+        // Set default profile picture\r\n+        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+        const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password: hashedPassword,\r\n+            password: hashedPassword, // Save the hashed password\r\n             gender,\r\n-            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n-         })\r\n-         await newUser.save();\r\n-         res.status(201).json({\r\n+            profilePicture: gender === 'male' ? boyProfilePic : girlProfilePic,\r\n+        });\r\n+\r\n+        await newUser.save();\r\n+\r\n+        res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePic: newUser.profilePic,\r\n-         });\r\n-    } catch(error) {\r\n-        console.log('Error in signup controller', error.message);\r\n-        res.status(500).json({error: 'Internal Server Error'});\r\n+            profilePicture: newUser.profilePicture,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error('Error in signup controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n-\r\n-export const login = (req, res) => {\r\n-    console.log('loginUser');\r\n-    res.send('Login route');\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-    console.log('logoutUser');\r\n-    res.send('Logout route');\r\n-};\r\n"
                },
                {
                    "date": 1738106014193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,51 @@\n import bcrypt from 'bcryptjs';\r\n import User from '../models/user.model.js';\r\n \r\n-export const signup = async (req, res) => {\r\n-    try {\r\n-        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-        // Validate passwords\r\n-        if (password !== confirmPassword) {\r\n-            return res.status(400).json({ message: 'Passwords do not match' });\r\n-        }\r\n+export const signup = async(req, res) => {\r\n+    try{\r\n+     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n+       if(password !== confirmPassword) {\r\n+           return res.status(400).json({message: 'Passwords do not match'});\r\n+       }\r\n+       const user = await User.findOne({username}); \r\n+         if(user) {\r\n+              return res.status(400).json({message: 'User already exists'});\r\n+         };\r\n+         //HASH PASSWORD HERE\r\n+         const salt = await bcryptjs.genSalt(10);\r\n+            const hashedPassword = await bcryptjs.hash(password, salt);\r\n+         // https://avatar-placeholder.iran.liara.run/\r\n \r\n-        // Check if user already exists\r\n-        const existingUser = await User.findOne({ username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ message: 'User already exists' });\r\n-        }\r\n+         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n+         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n \r\n-        // Hash password\r\n-        const salt = await bcrypt.genSalt(10);\r\n-        const hashedPassword = await bcrypt.hash(password, salt);\r\n-\r\n-        // Set default profile picture\r\n-        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-        const newUser = new User({\r\n+         const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password: hashedPassword, // Save the hashed password\r\n+            password: hashedPassword,\r\n             gender,\r\n-            profilePicture: gender === 'male' ? boyProfilePic : girlProfilePic,\r\n-        });\r\n-\r\n-        await newUser.save();\r\n-\r\n-        res.status(201).json({\r\n+            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n+         })\r\n+         await newUser.save();\r\n+         res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePicture: newUser.profilePicture,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error('Error in signup controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n+            profilePic: newUser.profilePic,\r\n+         });\r\n+    } catch(error) {\r\n+        console.log('Error in signup controller', error.message);\r\n+        res.status(500).json({error: 'Internal Server Error'});\r\n     }\r\n };\r\n+\r\n+export const login = (req, res) => {\r\n+    console.log('loginUser');\r\n+    res.send('Login route');\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+    console.log('logoutUser');\r\n+    res.send('Logout route');\r\n+};\r\n"
                },
                {
                    "date": 1738106114231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,47 @@\n import bcrypt from 'bcryptjs';\r\n import User from '../models/user.model.js';\r\n \r\n+export const signup = async (req, res) => {\r\n+    try {\r\n+        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-export const signup = async(req, res) => {\r\n-    try{\r\n-     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n-       if(password !== confirmPassword) {\r\n-           return res.status(400).json({message: 'Passwords do not match'});\r\n-       }\r\n-       const user = await User.findOne({username}); \r\n-         if(user) {\r\n-              return res.status(400).json({message: 'User already exists'});\r\n-         };\r\n-         //HASH PASSWORD HERE\r\n-         const salt = await bcryptjs.genSalt(10);\r\n-            const hashedPassword = await bcryptjs.hash(password, salt);\r\n-         // https://avatar-placeholder.iran.liara.run/\r\n+        // Validate passwords\r\n+        if (password !== confirmPassword) {\r\n+            return res.status(400).json({ message: 'Passwords do not match' });\r\n+        }\r\n \r\n-         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n-         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n+        // Check if user already exists\r\n+        const existingUser = await User.findOne({ username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: 'User already exists' });\r\n+        }\r\n \r\n-         const newUser = new User({\r\n+        // Hash password\r\n+        const salt = await bcrypt.genSalt(10);\r\n+        const hashedPassword = await bcrypt.hash(password, salt);\r\n+\r\n+        // Set default profile picture\r\n+        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+        const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password: hashedPassword,\r\n+            password: hashedPassword, // Save the hashed password\r\n             gender,\r\n-            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n-         })\r\n-         await newUser.save();\r\n-         res.status(201).json({\r\n+            profilePicture: gender === 'male' ? boyProfilePic : girlProfilePic,\r\n+        });\r\n+\r\n+        await newUser.save();\r\n+\r\n+        res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePic: newUser.profilePic,\r\n-         });\r\n-    } catch(error) {\r\n-        console.log('Error in signup controller', error.message);\r\n-        res.status(500).json({error: 'Internal Server Error'});\r\n+            profilePicture: newUser.profilePicture,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error('Error in signup controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n-\r\n-export const login = (req, res) => {\r\n-    console.log('loginUser');\r\n-    res.send('Login route');\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-    console.log('logoutUser');\r\n-    res.send('Logout route');\r\n-};\r\n"
                },
                {
                    "date": 1738106379728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,4 +44,44 @@\n         console.error('Error in signup controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n+\r\n+export const login = async (req, res) => {\r\n+    try {\r\n+        const { username, password } = req.body;\r\n+\r\n+        // Find user by username\r\n+        const user = await User.findOne({ username });\r\n+        if (!user) {\r\n+            return res.status(400).json({ message: 'User not found' });\r\n+        }\r\n+\r\n+        // Compare password\r\n+        const isMatch = await bcrypt.compare(password, user.password);\r\n+        if (!isMatch) {\r\n+            return res.status(400).json({ message: 'Invalid credentials' });\r\n+        }\r\n+\r\n+        res.status(200).json({\r\n+            _id: user._id,\r\n+            fullName: user.fullName,\r\n+            username: user.username,\r\n+            profilePicture: user.profilePicture,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error('Error in login controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n+    }\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+    try {\r\n+        // Assuming you have a session-based logout process\r\n+        req.logout(); // This might depend on your session handling middleware\r\n+\r\n+        res.status(200).json({ message: 'Logged out successfully' });\r\n+    } catch (error) {\r\n+        console.error('Error in logout controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n+    }\r\n+};\r\n"
                },
                {
                    "date": 1738106709416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,87 +1,91 @@\n-import bcrypt from 'bcryptjs';\r\n-import User from '../models/user.model.js';\r\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n \r\n export const signup = async (req, res) => {\r\n-    try {\r\n-        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n+  try {\r\n+    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-        // Validate passwords\r\n-        if (password !== confirmPassword) {\r\n-            return res.status(400).json({ message: 'Passwords do not match' });\r\n-        }\r\n+    // Validate passwords\r\n+    if (password !== confirmPassword) {\r\n+      return res.status(400).json({ message: \"Passwords do not match\" });\r\n+    }\r\n \r\n-        // Check if user already exists\r\n-        const existingUser = await User.findOne({ username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ message: 'User already exists' });\r\n-        }\r\n+    // Check if user already exists\r\n+    const existingUser = await User.findOne({ username });\r\n+    if (existingUser) {\r\n+      return res.status(400).json({ message: \"User already exists\" });\r\n+    }\r\n \r\n-        // Hash password\r\n-        const salt = await bcrypt.genSalt(10);\r\n-        const hashedPassword = await bcrypt.hash(password, salt);\r\n+    // Hash password\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    const hashedPassword = await bcrypt.hash(password, salt);\r\n \r\n-        // Set default profile picture\r\n-        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+    // Set default profile picture\r\n+    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n \r\n-        const newUser = new User({\r\n-            fullName,\r\n-            username,\r\n-            password: hashedPassword, // Save the hashed password\r\n-            gender,\r\n-            profilePicture: gender === 'male' ? boyProfilePic : girlProfilePic,\r\n-        });\r\n+    const newUser = new User({\r\n+      fullName,\r\n+      username,\r\n+      password: hashedPassword, // Save the hashed password\r\n+      gender,\r\n+      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n+    });\r\n \r\n-        await newUser.save();\r\n+    if (newUser) {\r\n+      await newUser.save();\r\n \r\n-        res.status(201).json({\r\n-            _id: newUser._id,\r\n-            fullName: newUser.fullName,\r\n-            username: newUser.username,\r\n-            profilePicture: newUser.profilePicture,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error('Error in signup controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n+      res.status(201).json({\r\n+        _id: newUser._id,\r\n+        fullName: newUser.fullName,\r\n+        username: newUser.username,\r\n+        profilePicture: newUser.profilePicture,\r\n+      });\r\n+    } else {\r\n+      res.status(400).json({ message: \"User not created\" });\r\n     }\r\n+  } catch (error) {\r\n+    console.error(\"Error in signup controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\r\n \r\n export const login = async (req, res) => {\r\n-    try {\r\n-        const { username, password } = req.body;\r\n+  try {\r\n+    const { username, password } = req.body;\r\n \r\n-        // Find user by username\r\n-        const user = await User.findOne({ username });\r\n-        if (!user) {\r\n-            return res.status(400).json({ message: 'User not found' });\r\n-        }\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    if (!user) {\r\n+      return res.status(400).json({ message: \"User not found\" });\r\n+    }\r\n \r\n-        // Compare password\r\n-        const isMatch = await bcrypt.compare(password, user.password);\r\n-        if (!isMatch) {\r\n-            return res.status(400).json({ message: 'Invalid credentials' });\r\n-        }\r\n+    // Compare password\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(400).json({ message: \"Invalid credentials\" });\r\n+    }\r\n \r\n-        res.status(200).json({\r\n-            _id: user._id,\r\n-            fullName: user.fullName,\r\n-            username: user.username,\r\n-            profilePicture: user.profilePicture,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error('Error in login controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n-    }\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+      profilePicture: user.profilePicture,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\r\n \r\n export const logout = (req, res) => {\r\n-    try {\r\n-        // Assuming you have a session-based logout process\r\n-        req.logout(); // This might depend on your session handling middleware\r\n+  try {\r\n+    // Assuming you have a session-based logout process\r\n+    req.logout(); // This might depend on your session handling middleware\r\n \r\n-        res.status(200).json({ message: 'Logged out successfully' });\r\n-    } catch (error) {\r\n-        console.error('Error in logout controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n-    }\r\n+    res.status(200).json({ message: \"Logged out successfully\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error in logout controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\r\n"
                },
                {
                    "date": 1738106782880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n       profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n     });\r\n \r\n     if (newUser) {\r\n+      // Generate JWT token here\r\n       await newUser.save();\r\n \r\n       res.status(201).json({\r\n         _id: newUser._id,\r\n"
                },
                {
                    "date": 1738108584217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n \r\n export const signup = async (req, res) => {\r\n   try {\r\n     const { fullName, username, password, confirmPassword, gender } = req.body;\r\n@@ -33,8 +34,9 @@\n     });\r\n \r\n     if (newUser) {\r\n       // Generate JWT token here\r\n+      await generateTokenAndSetCookie(newUser._id, res);\r\n       await newUser.save();\r\n \r\n       res.status(201).json({\r\n         _id: newUser._id,\r\n"
                },
                {
                    "date": 1738108719718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     });\r\n \r\n     if (newUser) {\r\n       // Generate JWT token here\r\n-      await generateTokenAndSetCookie(newUser._id, res);\r\n+      generateTokenAndSetCookie(newUser._id, res);\r\n       await newUser.save();\r\n \r\n       res.status(201).json({\r\n         _id: newUser._id,\r\n"
                },
                {
                    "date": 1738110266063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,24 +58,22 @@\n     const { username, password } = req.body;\r\n \r\n     // Find user by username\r\n     const user = await User.findOne({ username });\r\n-    if (!user) {\r\n-      return res.status(400).json({ message: \"User not found\" });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n+    \r\n+    if(!user || !isPasswordCorrect) {\r\n+        return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n \r\n-    // Compare password\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(400).json({ message: \"Invalid credentials\" });\r\n-    }\r\n+    res.status(200).json({\r\n+        _id: user._id,\r\n+        fullName: user.fullName,\r\n+        username: user.username,\r\n+        profilePicture: user.profilePicture,\r\n+      });\r\n \r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-      profilePicture: user.profilePicture,\r\n-    });\r\n   } catch (error) {\r\n     console.error(\"Error in login controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n"
                },
                {
                    "date": 1738110461149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     const { username, password } = req.body;\r\n \r\n     // Find user by username\r\n     const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n     \r\n     if(!user || !isPasswordCorrect) {\r\n         return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n"
                },
                {
                    "date": 1738110960831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+\r\n+export const signup = async (req, res) => {\r\n+  try {\r\n+    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n+\r\n+    // Validate passwords\r\n+    if (password !== confirmPassword) {\r\n+      return res.status(400).json({ message: \"Passwords do not match\" });\r\n+    }\r\n+\r\n+    // Check if user already exists\r\n+    const existingUser = await User.findOne({ username });\r\n+    if (existingUser) {\r\n+      return res.status(400).json({ message: \"User already exists\" });\r\n+    }\r\n+\r\n+    // Hash password\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    const hashedPassword = await bcrypt.hash(password, salt);\r\n+\r\n+    // Set default profile picture\r\n+    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+    const newUser = new User({\r\n+      fullName,\r\n+      username,\r\n+      password: hashedPassword, // Save the hashed password\r\n+      gender,\r\n+      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n+    });\r\n+\r\n+    if (newUser) {\r\n+      // Generate JWT token here\r\n+      generateTokenAndSetCookie(newUser._id, res);\r\n+      await newUser.save();\r\n+\r\n+      res.status(201).json({\r\n+        _id: newUser._id,\r\n+        fullName: newUser.fullName,\r\n+        username: newUser.username,\r\n+        profilePicture: newUser.profilePicture,\r\n+      });\r\n+    } else {\r\n+      res.status(400).json({ message: \"User not created\" });\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(\"Error in signup controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if(!user || !isPasswordCorrect) {\r\n+        return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+        _id: user._id,\r\n+        fullName: user.fullName,\r\n+        username: user.username,\r\n+        profilePicture: user.profilePicture,\r\n+      });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const logout = async (req, res) => {\r\n+    try {\r\n+        res.cookie('jwt','', {maxAge: 0});\r\n+        res.status(200).json({ message: \"Logged out successfully\" });\r\n+\r\n+    }catch (error) {\r\n+        console.error(\"Error in logout controller:\", error.message);\r\n+        res.status(500).json({ error: \"Internal Server Error\" });\r\n+    }\r\n+};\r\n"
                },
                {
                    "date": 1738111153456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n-export const logout = async (req, res) => {\r\n+export const logout = (req, res) => {\r\n     try {\r\n         res.cookie('jwt','', {maxAge: 0});\r\n         res.status(200).json({ message: \"Logged out successfully\" });\r\n \r\n@@ -88,96 +88,4 @@\n         console.error(\"Error in logout controller:\", error.message);\r\n         res.status(500).json({ error: \"Internal Server Error\" });\r\n     }\r\n };\r\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-\r\n-export const signup = async (req, res) => {\r\n-  try {\r\n-    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n-\r\n-    // Validate passwords\r\n-    if (password !== confirmPassword) {\r\n-      return res.status(400).json({ message: \"Passwords do not match\" });\r\n-    }\r\n-\r\n-    // Check if user already exists\r\n-    const existingUser = await User.findOne({ username });\r\n-    if (existingUser) {\r\n-      return res.status(400).json({ message: \"User already exists\" });\r\n-    }\r\n-\r\n-    // Hash password\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    const hashedPassword = await bcrypt.hash(password, salt);\r\n-\r\n-    // Set default profile picture\r\n-    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-    const newUser = new User({\r\n-      fullName,\r\n-      username,\r\n-      password: hashedPassword, // Save the hashed password\r\n-      gender,\r\n-      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n-    });\r\n-\r\n-    if (newUser) {\r\n-      // Generate JWT token here\r\n-      generateTokenAndSetCookie(newUser._id, res);\r\n-      await newUser.save();\r\n-\r\n-      res.status(201).json({\r\n-        _id: newUser._id,\r\n-        fullName: newUser.fullName,\r\n-        username: newUser.username,\r\n-        profilePicture: newUser.profilePicture,\r\n-      });\r\n-    } else {\r\n-      res.status(400).json({ message: \"User not created\" });\r\n-    }\r\n-  } catch (error) {\r\n-    console.error(\"Error in signup controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if(!user || !isPasswordCorrect) {\r\n-        return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-        _id: user._id,\r\n-        fullName: user.fullName,\r\n-        username: user.username,\r\n-        profilePicture: user.profilePicture,\r\n-      });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  try {\r\n-    // Assuming you have a session-based logout process\r\n-    req.logout(); // This might depend on your session handling middleware\r\n-\r\n-    res.status(200).json({ message: \"Logged out successfully\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error in logout controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n"
                },
                {
                    "date": 1738746600362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,10 @@\n \r\n     // Check if user already exists\r\n     const existingUser = await User.findOne({ username });\r\n     if (existingUser) {\r\n-      return res.status(400).json({ message: \"User already exists\" });\r\n+      // Remove the existing user\r\n+      await User.deleteOne({ username });\r\n     }\r\n \r\n     // Hash password\r\n     const salt = await bcrypt.genSalt(10);\r\n@@ -50,42 +51,5 @@\n   } catch (error) {\r\n     console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if(!user || !isPasswordCorrect) {\r\n-        return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-        _id: user._id,\r\n-        fullName: user.fullName,\r\n-        username: user.username,\r\n-        profilePicture: user.profilePicture,\r\n-      });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-    try {\r\n-        res.cookie('jwt','', {maxAge: 0});\r\n-        res.status(200).json({ message: \"Logged out successfully\" });\r\n-\r\n-    }catch (error) {\r\n-        console.error(\"Error in logout controller:\", error.message);\r\n-        res.status(500).json({ error: \"Internal Server Error\" });\r\n-    }\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738746878950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,5 +51,41 @@\n   } catch (error) {\r\n     console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+      profilePicture: user.profilePicture,\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+  try {\r\n+    res.cookie('jwt', '', { maxAge: 0 });\r\n+    res.status(200).json({ message: \"Logged out successfully\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error in logout controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738748098806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     const existingUser = await User.findOne({ username });\r\n     if (existingUser) {\r\n       // Remove the existing user\r\n       await User.deleteOne({ username });\r\n+      return res.status(400).json({ message: \"Username already taken. Please log in.\" });\r\n     }\r\n \r\n     // Hash password\r\n     const salt = await bcrypt.genSalt(10);\r\n@@ -51,41 +52,5 @@\n   } catch (error) {\r\n     console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-      profilePicture: user.profilePicture,\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  try {\r\n-    res.cookie('jwt', '', { maxAge: 0 });\r\n-    res.status(200).json({ message: \"Logged out successfully\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error in logout controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738748284423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+\r\n+export const signup = async (req, res) => {\r\n+  try {\r\n+    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n+\r\n+    // Validate passwords\r\n+    if (password !== confirmPassword) {\r\n+      return res.status(400).json({ message: \"Passwords do not match\" });\r\n+    }\r\n+\r\n+    // Check if user already exists\r\n+    const existingUser = await User.findOne({ username });\r\n+    if (existingUser) {\r\n+      // Remove the existing user\r\n+      await User.deleteOne({ username });\r\n+      return res.status(400).json({ message: \"Username already taken. Please log in.\" });\r\n+    }\r\n+\r\n+    // Hash password\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    const hashedPassword = await bcrypt.hash(password, salt);\r\n+\r\n+    // Set default profile picture\r\n+    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+    const newUser = new User({\r\n+      fullName,\r\n+      username,\r\n+      password: hashedPassword, // Save the hashed password\r\n+      gender,\r\n+      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n+    });\r\n+\r\n+    if (newUser) {\r\n+      // Generate JWT token here\r\n+      generateTokenAndSetCookie(newUser._id, res);\r\n+      await newUser.save();\r\n+\r\n+      res.status(201).json({\r\n+        _id: newUser._id,\r\n+        fullName: newUser.fullName,\r\n+        username: newUser.username,\r\n+        profilePicture: newUser.profilePicture,\r\n+      });\r\n+    } else {\r\n+      res.status(400).json({ message: \"User not created\" });\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(\"Error in signup controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+      profilePicture: user.profilePicture,\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+  try {\r\n+    res.cookie('jwt', '', { maxAge: 0 });\r\n+    res.status(200).json({ message: \"Logged out successfully\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error in logout controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738754474477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,71 +22,24 @@\n     // Hash password\r\n     const salt = await bcrypt.genSalt(10);\r\n     const hashedPassword = await bcrypt.hash(password, salt);\r\n \r\n-    // Set default profile picture\r\n-    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n     const newUser = new User({\r\n       fullName,\r\n       username,\r\n-      password: hashedPassword, // Save the hashed password\r\n+      password: hashedPassword,\r\n       gender,\r\n-      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n     });\r\n \r\n-    if (newUser) {\r\n-      // Generate JWT token here\r\n-      generateTokenAndSetCookie(newUser._id, res);\r\n-      await newUser.save();\r\n+    await newUser.save();\r\n+    generateTokenAndSetCookie(newUser._id, res);\r\n \r\n-      res.status(201).json({\r\n-        _id: newUser._id,\r\n-        fullName: newUser.fullName,\r\n-        username: newUser.username,\r\n-        profilePicture: newUser.profilePicture,\r\n-      });\r\n-    } else {\r\n-      res.status(400).json({ message: \"User not created\" });\r\n-    }\r\n+    res.status(201).json({\r\n+      _id: newUser._id,\r\n+      fullName: newUser.fullName,\r\n+      username: newUser.username,\r\n+    });\r\n   } catch (error) {\r\n     console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-      profilePicture: user.profilePicture,\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  try {\r\n-    res.cookie('jwt', '', { maxAge: 0 });\r\n-    res.status(200).json({ message: \"Logged out successfully\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error in logout controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738754649167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n \r\n     const newUser = new User({\r\n       fullName,\r\n       username,\r\n-      password: hashedPassword,\r\n+      password: hashedPassword, // Save the hashed password\r\n       gender,\r\n     });\r\n \r\n     await newUser.save();\r\n@@ -41,61 +41,40 @@\n   } catch (error) {\r\n     console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n-};\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+};\r\n \r\n-export const signup = async (req, res) => {\r\n+export const login = async (req, res) => {\r\n   try {\r\n-    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n+    const { username, password } = req.body;\r\n \r\n-    // Validate passwords\r\n-    if (password !== confirmPassword) {\r\n-      return res.status(400).json({ message: \"Passwords do not match\" });\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n \r\n-    // Check if user already exists\r\n-    const existingUser = await User.findOne({ username });\r\n-    if (existingUser) {\r\n-      // Remove the existing user\r\n-      await User.deleteOne({ username });\r\n-      return res.status(400).json({ message: \"Username already taken. Please log in.\" });\r\n-    }\r\n-\r\n-    // Hash password\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    const hashedPassword = await bcrypt.hash(password, salt);\r\n-\r\n-    // Set default profile picture\r\n-    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-    const newUser = new User({\r\n-      fullName,\r\n-      username,\r\n-      password: hashedPassword, // Save the hashed password\r\n-      gender,\r\n-      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n     });\r\n \r\n-    if (newUser) {\r\n-      // Generate JWT token here\r\n-      generateTokenAndSetCookie(newUser._id, res);\r\n-      await newUser.save();\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n \r\n-      res.status(201).json({\r\n-        _id: newUser._id,\r\n-        fullName: newUser.fullName,\r\n-        username: newUser.username,\r\n-        profilePicture: newUser.profilePicture,\r\n-      });\r\n-    } else {\r\n-      res.status(400).json({ message: \"User not created\" });\r\n-    }\r\n+export const logout = (req, res) => {\r\n+  try {\r\n+    res.cookie('jwt', '', { maxAge: 0 });\r\n+    res.status(200).json({ message: \"Logged out successfully\" });\r\n   } catch (error) {\r\n-    console.error(\"Error in signup controller:\", error.message);\r\n+    console.error(\"Error in logout controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738754946757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,32 +13,41 @@\n \r\n     // Check if user already exists\r\n     const existingUser = await User.findOne({ username });\r\n     if (existingUser) {\r\n-      // Remove the existing user\r\n-      await User.deleteOne({ username });\r\n-      return res.status(400).json({ message: \"Username already taken. Please log in.\" });\r\n+      return res.status(400).json({ message: \"User already exists\" });\r\n     }\r\n \r\n     // Hash password\r\n     const salt = await bcrypt.genSalt(10);\r\n     const hashedPassword = await bcrypt.hash(password, salt);\r\n \r\n+    // Set default profile picture\r\n+    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n     const newUser = new User({\r\n       fullName,\r\n       username,\r\n       password: hashedPassword, // Save the hashed password\r\n       gender,\r\n+      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n     });\r\n \r\n-    await newUser.save();\r\n-    generateTokenAndSetCookie(newUser._id, res);\r\n+    if (newUser) {\r\n+      // Generate JWT token here\r\n+      generateTokenAndSetCookie(newUser._id, res);\r\n+      await newUser.save();\r\n \r\n-    res.status(201).json({\r\n-      _id: newUser._id,\r\n-      fullName: newUser.fullName,\r\n-      username: newUser.username,\r\n-    });\r\n+      res.status(201).json({\r\n+        _id: newUser._id,\r\n+        fullName: newUser.fullName,\r\n+        username: newUser.username,\r\n+        profilePicture: newUser.profilePicture,\r\n+      });\r\n+    } else {\r\n+      res.status(400).json({ message: \"User not created\" });\r\n+    }\r\n   } catch (error) {\r\n     console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n@@ -51,30 +60,32 @@\n     // Find user by username\r\n     const user = await User.findOne({ username });\r\n     const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n     \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    if(!user || !isPasswordCorrect) {\r\n+        return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n     generateTokenAndSetCookie(user._id, res);\r\n \r\n     res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n+        _id: user._id,\r\n+        fullName: user.fullName,\r\n+        username: user.username,\r\n+        profilePicture: user.profilePicture,\r\n+      });\r\n \r\n   } catch (error) {\r\n     console.error(\"Error in login controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n export const logout = (req, res) => {\r\n-  try {\r\n\\ No newline at end of file\n-    res.cookie('jwt', '', { maxAge: 0 });\r\n-    res.status(200).json({ message: \"Logged out successfully\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error in logout controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\n+    try {\r\n+        res.cookie('jwt','', {maxAge: 0});\r\n+        res.status(200).json({ message: \"Logged out successfully\" });\r\n+\r\n+    }catch (error) {\r\n+        console.error(\"Error in logout controller:\", error.message);\r\n+        res.status(500).json({ error: \"Internal Server Error\" });\r\n+    }\r\n+};\r\n"
                },
                {
                    "date": 1738754975908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n \r\n     // Check if user already exists\r\n     const existingUser = await User.findOne({ username });\r\n     if (existingUser) {\r\n-      return res.status(400).json({ message: \"User already exists\" });\r\n+      return res.status(400).json({ message: \"Username already taken. Please log in.\" });\r\n     }\r\n \r\n     // Hash password\r\n     const salt = await bcrypt.genSalt(10);\r\n@@ -32,22 +32,16 @@\n       gender,\r\n       profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n     });\r\n \r\n-    if (newUser) {\r\n-      // Generate JWT token here\r\n-      generateTokenAndSetCookie(newUser._id, res);\r\n-      await newUser.save();\r\n+    await newUser.save();\r\n+    generateTokenAndSetCookie(newUser._id, res);\r\n \r\n-      res.status(201).json({\r\n-        _id: newUser._id,\r\n-        fullName: newUser.fullName,\r\n-        username: newUser.username,\r\n-        profilePicture: newUser.profilePicture,\r\n-      });\r\n-    } else {\r\n-      res.status(400).json({ message: \"User not created\" });\r\n-    }\r\n+    res.status(201).json({\r\n+      _id: newUser._id,\r\n+      fullName: newUser.fullName,\r\n+      username: newUser.username,\r\n+    });\r\n   } catch (error) {\r\n     console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n@@ -60,32 +54,30 @@\n     // Find user by username\r\n     const user = await User.findOne({ username });\r\n     const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n     \r\n-    if(!user || !isPasswordCorrect) {\r\n-        return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n     generateTokenAndSetCookie(user._id, res);\r\n \r\n     res.status(200).json({\r\n-        _id: user._id,\r\n-        fullName: user.fullName,\r\n-        username: user.username,\r\n-        profilePicture: user.profilePicture,\r\n-      });\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+    });\r\n \r\n   } catch (error) {\r\n     console.error(\"Error in login controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n export const logout = (req, res) => {\r\n-    try {\r\n-        res.cookie('jwt','', {maxAge: 0});\r\n-        res.status(200).json({ message: \"Logged out successfully\" });\r\n-\r\n-    }catch (error) {\r\n-        console.error(\"Error in logout controller:\", error.message);\r\n-        res.status(500).json({ error: \"Internal Server Error\" });\r\n-    }\r\n-};\r\n+  try {\r\n+    res.cookie('jwt', '', { maxAge: 0 });\r\n+    res.status(200).json({ message: \"Logged out successfully\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error in logout controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738755910250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,83 +1,44 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n \r\n-export const signup = async (req, res) => {\r\n-  try {\r\n-    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n+// Existing signup and login functions...\r\n \r\n-    // Validate passwords\r\n-    if (password !== confirmPassword) {\r\n-      return res.status(400).json({ message: \"Passwords do not match\" });\r\n-    }\r\n+export const resetPassword = async (req, res) => {\r\n+  const { email, puzzleAnswer } = req.body;\r\n \r\n-    // Check if user already exists\r\n-    const existingUser = await User.findOne({ username });\r\n-    if (existingUser) {\r\n-      return res.status(400).json({ message: \"Username already taken. Please log in.\" });\r\n-    }\r\n+  // Validate the email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n \r\n-    // Hash password\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    const hashedPassword = await bcrypt.hash(password, salt);\r\n+  // Verify the puzzle answer\r\n+  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n+    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n+  }\r\n \r\n-    // Set default profile picture\r\n-    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+  // Send password reset email (implement your email sending logic)\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n \r\n-    const newUser = new User({\r\n-      fullName,\r\n-      username,\r\n-      password: hashedPassword, // Save the hashed password\r\n-      gender,\r\n-      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n-    });\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Reset',\r\n+    text: 'Click the link to reset your password: [link]',\r\n+  };\r\n \r\n-    await newUser.save();\r\n-    generateTokenAndSetCookie(newUser._id, res);\r\n-\r\n-    res.status(201).json({\r\n-      _id: newUser._id,\r\n-      fullName: newUser.fullName,\r\n-      username: newUser.username,\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(\"Error in signup controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n     }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  try {\r\n-    res.cookie('jwt', '', { maxAge: 0 });\r\n-    res.status(200).json({ message: \"Logged out successfully\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error in logout controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n+    res.status(200).json({ message: \"Password reset email sent\" });\r\n+  });\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738756254578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,4 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n-\r\n-// Existing signup and login functions...\r\n-\r\n export const resetPassword = async (req, res) => {\r\n   const { email, puzzleAnswer } = req.body;\r\n \r\n   // Validate the email\r\n@@ -31,9 +24,9 @@\n   const mailOptions = {\r\n     from: process.env.EMAIL_USER,\r\n     to: email,\r\n     subject: 'Password Reset',\r\n-    text: 'Click the link to reset your password: [link]',\r\n+    text: 'Your password has been updated successfully.',\r\n   };\r\n \r\n   transporter.sendMail(mailOptions, (error, info) => {\r\n     if (error) {\r\n"
                },
                {
                    "date": 1738756421358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,38 @@\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+\r\n+export const signup = async (req, res) => {\r\n+  // Existing signup logic...\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n export const resetPassword = async (req, res) => {\r\n   const { email, puzzleAnswer } = req.body;\r\n \r\n   // Validate the email\r\n@@ -33,5 +67,9 @@\n       return res.status(500).json({ message: \"Error sending email\" });\r\n     }\r\n     res.status(200).json({ message: \"Password reset email sent\" });\r\n   });\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+  // Existing logout logic...\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738757156843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,53 +1,18 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+export const verifyEmail = async (req, res) => {\r\n+  const { email } = req.body;\r\n \r\n-export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const resetPassword = async (req, res) => {\r\n-  const { email, puzzleAnswer } = req.body;\r\n-\r\n-  // Validate the email\r\n+  // Find user by email\r\n   const user = await User.findOne({ email });\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n   }\r\n \r\n-  // Verify the puzzle answer\r\n-  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n-    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n-  }\r\n+  // Mark user as verified (you may want to add a verified field in your User model)\r\n+  user.verified = true; // Assuming you have a verified field in your User model\r\n+  await user.save();\r\n \r\n-  // Send password reset email (implement your email sending logic)\r\n+  // Send confirmation email\r\n   const transporter = nodemailer.createTransport({\r\n     service: 'gmail',\r\n     auth: {\r\n       user: process.env.EMAIL_USER,\r\n@@ -57,19 +22,15 @@\n \r\n   const mailOptions = {\r\n     from: process.env.EMAIL_USER,\r\n     to: email,\r\n-    subject: 'Password Reset',\r\n-    text: 'Your password has been updated successfully.',\r\n+    subject: 'Password Update Confirmation',\r\n+    text: 'Your password is now up to date!',\r\n   };\r\n \r\n   transporter.sendMail(mailOptions, (error, info) => {\r\n     if (error) {\r\n       return res.status(500).json({ message: \"Error sending email\" });\r\n     }\r\n-    res.status(200).json({ message: \"Password reset email sent\" });\r\n+    res.status(200).json({ message: \"Email verification sent\" });\r\n   });\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  // Existing logout logic...\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738757319570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,76 @@\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+\r\n+export const signup = async (req, res) => {\r\n+  // Existing signup logic...\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const resetPassword = async (req, res) => {\r\n+  const { email, puzzleAnswer } = req.body;\r\n+\r\n+  // Validate the email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n+\r\n+  // Verify the puzzle answer\r\n+  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n+    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n+  }\r\n+\r\n+  // Send password reset email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Reset',\r\n+    text: 'Your password has been updated successfully.',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Password reset email sent\" });\r\n+  });\r\n+};\r\n+\r\n export const verifyEmail = async (req, res) => {\r\n   const { email } = req.body;\r\n \r\n   // Find user by email\r\n@@ -6,9 +78,9 @@\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n   }\r\n \r\n-  // Mark user as verified (you may want to add a verified field in your User model)\r\n+  // Mark user as verified\r\n   user.verified = true; // Assuming you have a verified field in your User model\r\n   await user.save();\r\n \r\n   // Send confirmation email\r\n@@ -32,5 +104,9 @@\n       return res.status(500).json({ message: \"Error sending email\" });\r\n     }\r\n     res.status(200).json({ message: \"Email verification sent\" });\r\n   });\r\n-};\n\\ No newline at end of file\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+  // Existing logout logic...\r\n+};\r\n"
                },
                {
                    "date": 1738757733033,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,76 +1,4 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n-\r\n-export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const resetPassword = async (req, res) => {\r\n-  const { email, puzzleAnswer } = req.body;\r\n-\r\n-  // Validate the email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n-\r\n-  // Verify the puzzle answer\r\n-  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n-    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n-  }\r\n-\r\n-  // Send password reset email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Reset',\r\n-    text: 'Your password has been updated successfully.',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Password reset email sent\" });\r\n-  });\r\n-};\r\n-\r\n export const verifyEmail = async (req, res) => {\r\n   const { email } = req.body;\r\n \r\n   // Find user by email\r\n@@ -78,9 +6,9 @@\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n   }\r\n \r\n-  // Mark user as verified\r\n+  // Mark user as verified (you may want to add a verified field in your User model)\r\n   user.verified = true; // Assuming you have a verified field in your User model\r\n   await user.save();\r\n \r\n   // Send confirmation email\r\n@@ -104,9 +32,5 @@\n       return res.status(500).json({ message: \"Error sending email\" });\r\n     }\r\n     res.status(200).json({ message: \"Email verification sent\" });\r\n   });\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  // Existing logout logic...\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738758059232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,76 @@\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+\r\n+export const signup = async (req, res) => {\r\n+  // Existing signup logic...\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const resetPassword = async (req, res) => {\r\n+  const { email, puzzleAnswer } = req.body;\r\n+\r\n+  // Validate the email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n+\r\n+  // Verify the puzzle answer\r\n+  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n+    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n+  }\r\n+\r\n+  // Send password reset email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Reset',\r\n+    text: 'Your password has been updated successfully.',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Password reset email sent\" });\r\n+  });\r\n+};\r\n+\r\n export const verifyEmail = async (req, res) => {\r\n   const { email } = req.body;\r\n \r\n   // Find user by email\r\n@@ -6,9 +78,9 @@\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n   }\r\n \r\n-  // Mark user as verified (you may want to add a verified field in your User model)\r\n+  // Mark user as verified\r\n   user.verified = true; // Assuming you have a verified field in your User model\r\n   await user.save();\r\n \r\n   // Send confirmation email\r\n@@ -32,5 +104,9 @@\n       return res.status(500).json({ message: \"Error sending email\" });\r\n     }\r\n     res.status(200).json({ message: \"Email verification sent\" });\r\n   });\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+  // Existing logout logic...\r\n };\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738758230258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,41 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+export const verifyEmail = async (req, res) => {\r\n+  const { email } = req.body;\r\n \r\n-export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n-};\r\n+  // Find user by email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n \r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n+  // Mark user as verified (you may want to add a verified field in your User model)\r\n+  user.verified = true; // Assuming you have a verified field in your User model\r\n+  await user.save();\r\n \r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n+  // Send confirmation email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n \r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Update Confirmation',\r\n+    text: 'Your password is now up to date!',\r\n+  };\r\n \r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Email verification sent\" });\r\n+  });\r\n+};const { email, puzzleAnswer } = req.body;\r\n \r\n-export const resetPassword = async (req, res) => {\r\n-  const { email, puzzleAnswer } = req.body;\r\n-\r\n   // Validate the email\r\n   const user = await User.findOne({ email });\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n"
                },
                {
                    "date": 1738758276720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,41 @@\n-export const verifyEmail = async (req, res) => {\r\n-  const { email } = req.body;\r\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n \r\n-  // Find user by email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n+export const signup = async (req, res) => {\r\n+  // Existing signup logic...\r\n+};\r\n \r\n-  // Mark user as verified (you may want to add a verified field in your User model)\r\n-  user.verified = true; // Assuming you have a verified field in your User model\r\n-  await user.save();\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n \r\n-  // Send confirmation email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n \r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Update Confirmation',\r\n-    text: 'Your password is now up to date!',\r\n-  };\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+    });\r\n \r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Email verification sent\" });\r\n-  });\r\n-};const { email, puzzleAnswer } = req.body;\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n \r\n+export const resetPassword = async (req, res) => {\r\n+  const { email, puzzleAnswer } = req.body;\r\n+\r\n   // Validate the email\r\n   const user = await User.findOne({ email });\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n@@ -108,5 +108,5 @@\n };\r\n \r\n export const logout = (req, res) => {\r\n   // Existing logout logic...\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1738758531669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+export const verifyEmail = async (req, res) => {\r\n+  const { email } = req.body;\r\n+\r\n+  // Find user by email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n+\r\n+  // Mark user as verified (you may want to add a verified field in your User model)\r\n+  user.verified = true; // Assuming you have a verified field in your User model\r\n+  await user.save();\r\n+\r\n+  // Send confirmation email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Update Confirmation',\r\n+    text: 'Your password is now up to date!',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Email verification sent\" });\r\n+  });\r\n+};const { email, puzzleAnswer } = req.body;\r\n+\r\n+  // Validate the email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n+\r\n+  // Verify the puzzle answer\r\n+  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n+    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n+  }\r\n+\r\n+  // Send password reset email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Reset',\r\n+    text: 'Your password has been updated successfully.',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Password reset email sent\" });\r\n+  });\r\n+};\r\n+\r\n+export const verifyEmail = async (req, res) => {\r\n+  const { email } = req.body;\r\n+\r\n+  // Find user by email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n+\r\n+  // Mark user as verified\r\n+  user.verified = true; // Assuming you have a verified field in your User model\r\n+  await user.save();\r\n+\r\n+  // Send confirmation email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Update Confirmation',\r\n+    text: 'Your password is now up to date!',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Email verification sent\" });\r\n+  });\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+  // Existing logout logic...\r\n+};\r\n"
                },
                {
                    "date": 1738758581831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,116 +1,4 @@\n-export const verifyEmail = async (req, res) => {\r\n-  const { email } = req.body;\r\n-\r\n-  // Find user by email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n-\r\n-  // Mark user as verified (you may want to add a verified field in your User model)\r\n-  user.verified = true; // Assuming you have a verified field in your User model\r\n-  await user.save();\r\n-\r\n-  // Send confirmation email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Update Confirmation',\r\n-    text: 'Your password is now up to date!',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Email verification sent\" });\r\n-  });\r\n-};const { email, puzzleAnswer } = req.body;\r\n-\r\n-  // Validate the email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n-\r\n-  // Verify the puzzle answer\r\n-  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n-    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n-  }\r\n-\r\n-  // Send password reset email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Reset',\r\n-    text: 'Your password has been updated successfully.',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Password reset email sent\" });\r\n-  });\r\n-};\r\n-\r\n-export const verifyEmail = async (req, res) => {\r\n-  const { email } = req.body;\r\n-\r\n-  // Find user by email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n-\r\n-  // Mark user as verified\r\n-  user.verified = true; // Assuming you have a verified field in your User model\r\n-  await user.save();\r\n-\r\n-  // Send confirmation email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Update Confirmation',\r\n-    text: 'Your password is now up to date!',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Email verification sent\" });\r\n-  });\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  // Existing logout logic...\r\n-};\r\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n"
                },
                {
                    "date": 1738758824040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,41 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+export const verifyEmail = async (req, res) => {\r\n+  const { email } = req.body;\r\n \r\n-export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n-};\r\n+  // Find user by email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n \r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n+  // Mark user as verified (you may want to add a verified field in your User model)\r\n+  user.verified = true; // Assuming you have a verified field in your User model\r\n+  await user.save();\r\n \r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n+  // Send confirmation email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n \r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Update Confirmation',\r\n+    text: 'Your password is now up to date!',\r\n+  };\r\n \r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Email verification sent\" });\r\n+  });\r\n+};const { email, puzzleAnswer } = req.body;\r\n \r\n-export const resetPassword = async (req, res) => {\r\n-  const { email, puzzleAnswer } = req.body;\r\n-\r\n   // Validate the email\r\n   const user = await User.findOne({ email });\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n"
                },
                {
                    "date": 1738758904316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,41 @@\n-export const verifyEmail = async (req, res) => {\r\n-  const { email } = req.body;\r\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n \r\n-  // Find user by email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n+export const signup = async (req, res) => {\r\n+  // Existing signup logic...\r\n+};\r\n \r\n-  // Mark user as verified (you may want to add a verified field in your User model)\r\n-  user.verified = true; // Assuming you have a verified field in your User model\r\n-  await user.save();\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n \r\n-  // Send confirmation email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n \r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Update Confirmation',\r\n-    text: 'Your password is now up to date!',\r\n-  };\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+    });\r\n \r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Email verification sent\" });\r\n-  });\r\n-};const { email, puzzleAnswer } = req.body;\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n \r\n+export const resetPassword = async (req, res) => {\r\n+  const { email, puzzleAnswer } = req.body;\r\n+\r\n   // Validate the email\r\n   const user = await User.findOne({ email });\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n"
                },
                {
                    "date": 1738759094821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,41 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+export const verifyEmail = async (req, res) => {\r\n+  const { email } = req.body;\r\n \r\n-export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n-};\r\n+  // Find user by email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n \r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n+  // Mark user as verified (you may want to add a verified field in your User model)\r\n+  user.verified = true; // Assuming you have a verified field in your User model\r\n+  await user.save();\r\n \r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n+  // Send confirmation email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n \r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Update Confirmation',\r\n+    text: 'Your password is now up to date!',\r\n+  };\r\n \r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Email verification sent\" });\r\n+  });\r\n+};const { email, puzzleAnswer } = req.body;\r\n \r\n-export const resetPassword = async (req, res) => {\r\n-  const { email, puzzleAnswer } = req.body;\r\n-\r\n   // Validate the email\r\n   const user = await User.findOne({ email });\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n"
                },
                {
                    "date": 1738759169275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,41 +1,41 @@\n-export const verifyEmail = async (req, res) => {\r\n-  const { email } = req.body;\r\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n \r\n-  // Find user by email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n+export const signup = async (req, res) => {\r\n+  // Existing signup logic...\r\n+};\r\n \r\n-  // Mark user as verified (you may want to add a verified field in your User model)\r\n-  user.verified = true; // Assuming you have a verified field in your User model\r\n-  await user.save();\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n \r\n-  // Send confirmation email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n \r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Update Confirmation',\r\n-    text: 'Your password is now up to date!',\r\n-  };\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+    });\r\n \r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Email verification sent\" });\r\n-  });\r\n-};const { email, puzzleAnswer } = req.body;\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n \r\n+export const resetPassword = async (req, res) => {\r\n+  const { email, puzzleAnswer } = req.body;\r\n+\r\n   // Validate the email\r\n   const user = await User.findOne({ email });\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n"
                },
                {
                    "date": 1738759890936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,112 +1,19 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+export const updatePassword = async (req, res) => {\r\n+  const { newPassword } = req.body;\r\n \r\n-export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n-};\r\n+  // Assuming you have a way to identify the user (e.g., from a token)\r\n+  const userId = req.user.id; // Example: get user ID from token\r\n \r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const resetPassword = async (req, res) => {\r\n-  const { email, puzzleAnswer } = req.body;\r\n-\r\n-  // Validate the email\r\n-  const user = await User.findOne({ email });\r\n+  // Find user by ID\r\n+  const user = await User.findById(userId);\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n   }\r\n \r\n-  // Verify the puzzle answer\r\n-  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n-    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n-  }\r\n-\r\n-  // Send password reset email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Reset',\r\n-    text: 'Your password has been updated successfully.',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Password reset email sent\" });\r\n-  });\r\n-};\r\n-\r\n-export const verifyEmail = async (req, res) => {\r\n-  const { email } = req.body;\r\n-\r\n-  // Find user by email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n-\r\n-  // Mark user as verified\r\n-  user.verified = true; // Assuming you have a verified field in your User model\r\n+  // Hash the new password\r\n+  const salt = await bcrypt.genSalt(10);\r\n+  user.password = await bcrypt.hash(newPassword, salt);\r\n   await user.save();\r\n \r\n-  // Send confirmation email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Update Confirmation',\r\n-    text: 'Your password is now up to date!',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Email verification sent\" });\r\n-  });\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  // Existing logout logic...\r\n-};\r\n+  res.status(200).json({ message: \"Password updated successfully\" });\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738759975208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,112 @@\n-export const updatePassword = async (req, res) => {\r\n-  const { newPassword } = req.body;\r\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n \r\n-  // Assuming you have a way to identify the user (e.g., from a token)\r\n-  const userId = req.user.id; // Example: get user ID from token\r\n+export const signup = async (req, res) => {\r\n+  // Existing signup logic...\r\n+};\r\n \r\n-  // Find user by ID\r\n-  const user = await User.findById(userId);\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n\\ No newline at end of file\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+    });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const resetPassword = async (req, res) => {\r\n+  const { email, puzzleAnswer } = req.body;\r\n+\r\n+  // Validate the email\r\n+  const user = await User.findOne({ email });\r\n   if (!user) {\r\n     return res.status(404).json({ message: \"User not found\" });\r\n   }\r\n \r\n-  // Hash the new password\r\n-  const salt = await bcrypt.genSalt(10);\r\n-  user.password = await bcrypt.hash(newPassword, salt);\r\n+  // Verify the puzzle answer\r\n+  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n+    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n+  }\r\n+\r\n+  // Send password reset email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Reset',\r\n+    text: 'Your password has been updated successfully.',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Password reset email sent\" });\r\n+  });\r\n+};\r\n+\r\n+export const verifyEmail = async (req, res) => {\r\n+  const { email } = req.body;\r\n+\r\n+  // Find user by email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n+\r\n+  // Mark user as verified\r\n+  user.verified = true; // Assuming you have a verified field in your User model\r\n   await user.save();\r\n \r\n-  res.status(200).json({ message: \"Password updated successfully\" });\r\n-};\n+  // Send confirmation email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Update Confirmation',\r\n+    text: 'Your password is now up to date!',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Email verification sent\" });\r\n+  });\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+  // Existing logout logic...\r\n+};\r\n"
                },
                {
                    "date": 1738763422524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,69 @@\n     const user = await User.findOne({ username });\r\n     const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n     \r\n     if (!user || !isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"InvalidIt seems there was an error while attempting to update the `auth.controller.js` file. I will manually outline the changes that need to be made and then proceed to implement them.\r\n+\r\n+### Changes to be made in `backend/controllers/auth.controller.js`:\r\n+\r\n+1. **Add the `updatePassword` function** to handle the password update logic.\r\n+\r\n+Here’s how the updated `auth.controller.js` file should look with the new function added:\r\n+\r\n+```javascript\r\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+\r\n+// Existing functions...\r\n+\r\n+export const updatePassword = async (req, res) => {\r\n+  const { newPassword } = req.body;\r\n+  const userId = req.user._id; // Assuming user ID is available in the request\r\n+\r\n+  try {\r\n+    // Hash the new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+\r\n+    // Update the user's password in the database\r\n+    await User.findByIdAndUpdate(userId, { password: hashedPassword });\r\n+\r\n+    res.status(200).json({ message: \"Password updated successfully!\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error updating password:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+```\r\n+\r\n+### Next Steps:\r\n+1. **Manually implement the changes** in the `auth.controller.js` file.\r\n+2. **Test the entire flow** to ensure that the password reset functionality works as expected.\r\n+\r\n+I will now proceed to implement the `updatePassword` function in the `auth.controller.js` file. \r\n+<create_file>\r\n+<path>backend/controllers/auth.controller.js</path>\r\n+<content>\r\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+\r\n+export const signup = async (req, res) => {\r\n+  // Existing signup logic...\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if (!user || !isPasswordCorrect) {\r\n       return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n     generateTokenAndSetCookie(user._id, res);\r\n \r\n@@ -31,82 +92,23 @@\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n-export const resetPassword = async (req, res) => {\r\n-  const { email, puzzleAnswer } = req.body;\r\n+export const updatePassword = async (req, res) => {\r\n+  const { newPassword } = req.body;\r\n+  const userId = req.user._id; // Assuming user ID is available in the request\r\n \r\n-  // Validate the email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n+  try {\r\n+    // Hash the new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n \r\n-  // Verify the puzzle answer\r\n-  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n-    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n-  }\r\n+    // Update the user's password in the database\r\n+    await User.findByIdAndUpdate(userId, { password: hashedPassword });\r\n \r\n-  // Send password reset email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Reset',\r\n-    text: 'Your password has been updated successfully.',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Password reset email sent\" });\r\n-  });\r\n-};\r\n-\r\n-export const verifyEmail = async (req, res) => {\r\n-  const { email } = req.body;\r\n-\r\n-  // Find user by email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n+    res.status(200).json({ message: \"Password updated successfully!\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error updating password:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n-\r\n-  // Mark user as verified\r\n-  user.verified = true; // Assuming you have a verified field in your User model\r\n-  await user.save();\r\n-\r\n-  // Send confirmation email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Update Confirmation',\r\n-    text: 'Your password is now up to date!',\r\n-  };\r\n\\ No newline at end of file\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Email verification sent\" });\r\n-  });\r\n };\r\n \r\n-export const logout = (req, res) => {\r\n-  // Existing logout logic...\r\n-};\n+// Other existing functions...\r\n"
                },
                {
                    "date": 1738763744523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,69 +15,8 @@\n     const user = await User.findOne({ username });\r\n     const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n     \r\n     if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"InvalidIt seems there was an error while attempting to update the `auth.controller.js` file. I will manually outline the changes that need to be made and then proceed to implement them.\r\n-\r\n-### Changes to be made in `backend/controllers/auth.controller.js`:\r\n-\r\n-1. **Add the `updatePassword` function** to handle the password update logic.\r\n-\r\n-Here’s how the updated `auth.controller.js` file should look with the new function added:\r\n-\r\n-```javascript\r\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n-\r\n-// Existing functions...\r\n-\r\n-export const updatePassword = async (req, res) => {\r\n-  const { newPassword } = req.body;\r\n-  const userId = req.user._id; // Assuming user ID is available in the request\r\n-\r\n-  try {\r\n-    // Hash the new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update the user's password in the database\r\n-    await User.findByIdAndUpdate(userId, { password: hashedPassword });\r\n-\r\n-    res.status(200).json({ message: \"Password updated successfully!\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error updating password:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-```\r\n-\r\n-### Next Steps:\r\n-1. **Manually implement the changes** in the `auth.controller.js` file.\r\n-2. **Test the entire flow** to ensure that the password reset functionality works as expected.\r\n-\r\n-I will now proceed to implement the `updatePassword` function in the `auth.controller.js` file. \r\n-<create_file>\r\n-<path>backend/controllers/auth.controller.js</path>\r\n-<content>\r\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n-\r\n-export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n       return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n     generateTokenAndSetCookie(user._id, res);\r\n \r\n@@ -92,23 +31,82 @@\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n-export const updatePassword = async (req, res) => {\r\n-  const { newPassword } = req.body;\r\n-  const userId = req.user._id; // Assuming user ID is available in the request\r\n+export const resetPassword = async (req, res) => {\r\n+  const { email, puzzleAnswer } = req.body;\r\n \r\n-  try {\r\n-    // Hash the new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n+  // Validate the email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n \r\n-    // Update the user's password in the database\r\n-    await User.findByIdAndUpdate(userId, { password: hashedPassword });\r\n+  // Verify the puzzle answer\r\n+  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n+    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n+  }\r\n \r\n-    res.status(200).json({ message: \"Password updated successfully!\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error updating password:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  // Send password reset email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Reset',\r\n+    text: 'Your password has been updated successfully.',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Password reset email sent\" });\r\n+  });\r\n+};\r\n+\r\n+export const verifyEmail = async (req, res) => {\r\n+  const { email } = req.body;\r\n+\r\n+  // Find user by email\r\n+  const user = await User.findOne({ email });\r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n   }\r\n+\r\n+  // Mark user as verified\r\n+  user.verified = true; // Assuming you have a verified field in your User model\r\n+  await user.save();\r\n+\r\n+  // Send confirmation email\r\n+  const transporter = nodemailer.createTransport({\r\n+    service: 'gmail',\r\n+    auth: {\r\n+      user: process.env.EMAIL_USER,\r\n+      pass: process.env.EMAIL_PASS,\r\n+    },\r\n+  });\r\n+\r\n+  const mailOptions = {\r\n+    from: process.env.EMAIL_USER,\r\n+    to: email,\r\n+    subject: 'Password Update Confirmation',\r\n+    text: 'Your password is now up to date!',\r\n+  };\r\n+\r\n+  transporter.sendMail(mailOptions, (error, info) => {\r\n+    if (error) {\r\n+      return res.status(500).json({ message: \"Error sending email\" });\r\n+    }\r\n+    res.status(200).json({ message: \"Email verification sent\" });\r\n+  });\r\n };\r\n \r\n-// Other existing functions...\r\n+export const logout = (req, res) => {\r\n+  // Existing logout logic...\r\n+};\r\n"
                },
                {
                    "date": 1738763762584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,82 +31,23 @@\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n-export const resetPassword = async (req, res) => {\r\n-  const { email, puzzleAnswer } = req.body;\r\n+export const updatePassword = async (req, res) => {\r\n+  const { newPassword } = req.body;\r\n+  const userId = req.user._id; // Assuming user ID is available in the request\r\n \r\n-  // Validate the email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n+  try {\r\n+    // Hash the new password\r\n+    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n \r\n-  // Verify the puzzle answer\r\n-  if (puzzleAnswer !== \"4\") { // Example puzzle answer\r\n-    return res.status(400).json({ message: \"Incorrect puzzle answer\" });\r\n-  }\r\n+    // Update the user's password in the database\r\n+    await User.findByIdAndUpdate(userId, { password: hashedPassword });\r\n \r\n-  // Send password reset email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Reset',\r\n-    text: 'Your password has been updated successfully.',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Password reset email sent\" });\r\n-  });\r\n-};\r\n-\r\n-export const verifyEmail = async (req, res) => {\r\n-  const { email } = req.body;\r\n-\r\n-  // Find user by email\r\n-  const user = await User.findOne({ email });\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n+    res.status(200).json({ message: \"Password updated successfully!\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error updating password:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n-\r\n-  // Mark user as verified\r\n-  user.verified = true; // Assuming you have a verified field in your User model\r\n-  await user.save();\r\n-\r\n-  // Send confirmation email\r\n-  const transporter = nodemailer.createTransport({\r\n-    service: 'gmail',\r\n-    auth: {\r\n-      user: process.env.EMAIL_USER,\r\n-      pass: process.env.EMAIL_PASS,\r\n-    },\r\n-  });\r\n-\r\n-  const mailOptions = {\r\n-    from: process.env.EMAIL_USER,\r\n-    to: email,\r\n-    subject: 'Password Update Confirmation',\r\n-    text: 'Your password is now up to date!',\r\n-  };\r\n-\r\n-  transporter.sendMail(mailOptions, (error, info) => {\r\n-    if (error) {\r\n-      return res.status(500).json({ message: \"Error sending email\" });\r\n-    }\r\n-    res.status(200).json({ message: \"Email verification sent\" });\r\n-  });\r\n };\r\n \r\n-export const logout = (req, res) => {\r\n-  // Existing logout logic...\r\n-};\r\n+// Other existing functions...\r\n"
                },
                {
                    "date": 1738763869826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,5 +49,10 @@\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n+export const logout = (req, res) => {\r\n+  res.clearCookie('jwt'); // Clear the JWT cookie\r\n+  res.status(200).json({ message: \"Logged out successfully!\" });\r\n+};\r\n+\r\n // Other existing functions...\r\n"
                },
                {
                    "date": 1738763935694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,5 +54,5 @@\n   res.clearCookie('jwt'); // Clear the JWT cookie\r\n   res.status(200).json({ message: \"Logged out successfully!\" });\r\n };\r\n \r\n-// Other existing functions...\r\n+\r\n"
                },
                {
                    "date": 1738764716707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,6 +53,4 @@\n export const logout = (req, res) => {\r\n   res.clearCookie('jwt'); // Clear the JWT cookie\r\n   res.status(200).json({ message: \"Logged out successfully!\" });\r\n };\r\n-\r\n-\r\n"
                },
                {
                    "date": 1738765066707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,5 +52,5 @@\n \r\n export const logout = (req, res) => {\r\n   res.clearCookie('jwt'); // Clear the JWT cookie\r\n   res.status(200).json({ message: \"Logged out successfully!\" });\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738765104811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n \r\n export const signup = async (req, res) => {\r\n   // Existing signup logic...\r\n };\r\n"
                },
                {
                    "date": 1738766499350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,29 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n \r\n export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n+  const { username, email, password } = req.body; // Include email\r\n+\r\n+  try {\r\n+    // Hash the password\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    // Create a new user\r\n+    const newUser = new User({\r\n+      username,\r\n+      email, // Save email to the user model\r\n+      password: hashedPassword,\r\n+    });\r\n+\r\n+    await newUser.save();\r\n+    res.status(201).json({ message: \"User created successfully!\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error in signup controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\r\n \r\n export const login = async (req, res) => {\r\n   try {\r\n@@ -31,11 +50,17 @@\n   }\r\n };\r\n \r\n export const updatePassword = async (req, res) => {\r\n-  const { newPassword } = req.body;\r\n-  const userId = req.user._id; // Assuming user ID is available in the request\r\n+  const { email, newPassword } = req.body; // Include email\r\n+  const user = await User.findOne({ email }); // Find user by email\r\n \r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n+\r\n+  const userId = user._id; // Get user ID\r\n+\r\n   try {\r\n     // Hash the new password\r\n     const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n \r\n@@ -51,5 +76,5 @@\n \r\n export const logout = (req, res) => {\r\n   res.clearCookie('jwt'); // Clear the JWT cookie\r\n   res.status(200).json({ message: \"Logged out successfully!\" });\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1738767203722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,10 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n-\r\n export const signup = async (req, res) => {\r\n-  const { username, email, password } = req.body; // Include email\r\n-\r\n-  try {\r\n-    // Hash the password\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n-\r\n-    // Create a new user\r\n-    const newUser = new User({\r\n-      username,\r\n-      email, // Save email to the user model\r\n-      password: hashedPassword,\r\n-    });\r\n-\r\n-    await newUser.save();\r\n-    res.status(201).json({ message: \"User created successfully!\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error in signup controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n+  // Existing signup logic...\r\n };\r\n \r\n export const login = async (req, res) => {\r\n   try {\r\n@@ -50,17 +31,11 @@\n   }\r\n };\r\n \r\n export const updatePassword = async (req, res) => {\r\n-  const { email, newPassword } = req.body; // Include email\r\n-  const user = await User.findOne({ email }); // Find user by email\r\n+  const { newPassword } = req.body;\r\n+  const userId = req.user._id; // Assuming user ID is available in the request\r\n \r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n-\r\n-  const userId = user._id; // Get user ID\r\n-\r\n   try {\r\n     // Hash the new password\r\n     const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n \r\n@@ -76,5 +51,5 @@\n \r\n export const logout = (req, res) => {\r\n   res.clearCookie('jwt'); // Clear the JWT cookie\r\n   res.status(200).json({ message: \"Logged out successfully!\" });\r\n-};\r\n+};\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738767359288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,29 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n+\r\n export const signup = async (req, res) => {\r\n-  // Existing signup logic...\r\n+  const { username, email, password } = req.body; // Include email\r\n+\r\n+  try {\r\n+    // Hash the password\r\n+    const hashedPassword = await bcrypt.hash(password, 10);\r\n+\r\n+    // Create a new user\r\n+    const newUser = new User({\r\n+      username,\r\n+      email, // Save email to the user model\r\n+      password: hashedPassword,\r\n+    });\r\n+\r\n+    await newUser.save();\r\n+    res.status(201).json({ message: \"User created successfully!\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error in signup controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\r\n \r\n export const login = async (req, res) => {\r\n   try {\r\n@@ -31,11 +50,17 @@\n   }\r\n };\r\n \r\n export const updatePassword = async (req, res) => {\r\n-  const { newPassword } = req.body;\r\n-  const userId = req.user._id; // Assuming user ID is available in the request\r\n+  const { email, newPassword } = req.body; // Include email\r\n+  const user = await User.findOne({ email }); // Find user by email\r\n \r\n+  if (!user) {\r\n+    return res.status(404).json({ message: \"User not found\" });\r\n+  }\r\n+\r\n+  const userId = user._id; // Get user ID\r\n+\r\n   try {\r\n     // Hash the new password\r\n     const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n \r\n"
                },
                {
                    "date": 1738767729526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-import nodemailer from \"nodemailer\"; // Import nodemailer for sending emails\r\n \r\n export const signup = async (req, res) => {\r\n   const { username, email, password } = req.body; // Include email\r\n \r\n"
                },
                {
                    "date": 1738768474488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,14 @@\n export const signup = async (req, res) => {\r\n   const { username, email, password } = req.body; // Include email\r\n \r\n   try {\r\n+    // Check if the username already exists\r\n+    const existingUser = await User.findOne({ username });\r\n+    if (existingUser) {\r\n+      return res.status(400).json({ message: \"This username is taken. Please choose a different one.\" });\r\n+    }\r\n+\r\n     // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     // Create a new user\r\n@@ -18,62 +24,10 @@\n \r\n     await newUser.save();\r\n     res.status(201).json({ message: \"User created successfully!\" });\r\n   } catch (error) {\r\n-    console.error(\"Error in signup controller:\", error.message);\r\n+    console.error(\"Error in signup controller:\", error); // Log the entire error\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if (!user || !isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-    });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const updatePassword = async (req, res) => {\r\n-  const { email, newPassword } = req.body; // Include email\r\n-  const user = await User.findOne({ email }); // Find user by email\r\n-\r\n-  if (!user) {\r\n-    return res.status(404).json({ message: \"User not found\" });\r\n-  }\r\n-\r\n-  const userId = user._id; // Get user ID\r\n-\r\n-  try {\r\n-    // Hash the new password\r\n-    const hashedPassword = await bcrypt.hash(newPassword, 10);\r\n-\r\n-    // Update the user's password in the database\r\n-    await User.findByIdAndUpdate(userId, { password: hashedPassword });\r\n-\r\n-    res.status(200).json({ message: \"Password updated successfully!\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error updating password:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  res.clearCookie('jwt'); // Clear the JWT cookie\r\n-  res.status(200).json({ message: \"Logged out successfully!\" });\r\n\\ No newline at end of file\n-};\n+// Other functions remain unchanged...\r\n"
                },
                {
                    "date": 1738768508287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,32 +2,29 @@\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n \r\n export const signup = async (req, res) => {\r\n-  const { username, email, password } = req.body; // Include email\r\n+  const { username, email, password } = req.body;\r\n \r\n+  // Input validation\r\n+  if (!username || !email || !password) {\r\n+    return res.status(400).json({ error: \"All fields are required\" });\r\n+  }\r\n+\r\n   try {\r\n-    // Check if the username already exists\r\n-    const existingUser = await User.findOne({ username });\r\n-    if (existingUser) {\r\n-      return res.status(400).json({ message: \"This username is taken. Please choose a different one.\" });\r\n-    }\r\n-\r\n     // Hash the password\r\n     const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n     // Create a new user\r\n     const newUser = new User({\r\n       username,\r\n-      email, // Save email to the user model\r\n+      email,\r\n       password: hashedPassword,\r\n     });\r\n \r\n     await newUser.save();\r\n     res.status(201).json({ message: \"User created successfully!\" });\r\n   } catch (error) {\r\n-    console.error(\"Error in signup controller:\", error); // Log the entire error\r\n+    console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n-\r\n-// Other functions remain unchanged...\r\n"
                },
                {
                    "date": 1738768534577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n \r\n export const signup = async (req, res) => {\r\n   const { username, email, password } = req.body;\r\n \r\n"
                },
                {
                    "date": 1738768751209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n \r\n export const signup = async (req, res) => {\r\n-  const { username, email, password } = req.body;\r\n+  const { fullname, email, username, password, confirmPassword } = req.body;\r\n \r\n   // Input validation\r\n-  if (!username || !email || !password) {\r\n+  if (!fullname ||  !email || !username  || !password || ! confirmPassword) {\r\n     return res.status(400).json({ error: \"All fields are required\" });\r\n   }\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1738768863180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,13 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n \r\n export const signup = async (req, res) => {\r\n   const { fullname, email, username, password, confirmPassword } = req.body;\r\n \r\n   // Input validation\r\n-  if (!fullname ||  !email || !username  || !password || ! confirmPassword) {\r\n+  if (!fullname || !email || !username || !password || !confirmPassword) {\r\n     return res.status(400).json({ error: \"All fields are required\" });\r\n   }\r\n \r\n   try {\r\n@@ -26,4 +27,42 @@\n     console.error(\"Error in signup controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n+\r\n+export const login = async (req, res) => {\r\n+  const { username, password } = req.body;\r\n+\r\n+  try {\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    if (!user) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+\r\n+    // Compare password\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n+    if (!isPasswordCorrect) {\r\n+      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+\r\n+    // Generate token and set cookie (if applicable)\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      username: user.username,\r\n+      email: user.email,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const updatePassword = async (req, res) => {\r\n+  // ... (existing update password logic)\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+  // ... (existing logout logic)\r\n+};\r\n"
                },
                {
                    "date": 1738768979021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,12 +2,12 @@\n import User from \"../models/user.model.js\";\r\n import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n \r\n export const signup = async (req, res) => {\r\n-  const { fullname, email, username, password, confirmPassword } = req.body;\r\n+  const { fullname, email, username, password, confirmPassword, gender} = req.body;\r\n \r\n   // Input validation\r\n-  if (!fullname || !email || !username || !password || !confirmPassword) {\r\n+  if (!fullname || !email || !username || !password || !confirmPassword || !gender) {\r\n     return res.status(400).json({ error: \"All fields are required\" });\r\n   }\r\n \r\n   try {\r\n"
                },
                {
                    "date": 1738770947303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,28 @@\n+import User from \"../models/user.model.js\";\r\n import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n \r\n export const signup = async (req, res) => {\r\n-  const { fullname, email, username, password, confirmPassword, gender} = req.body;\r\n+    try {\r\n+        const { fullName, username, password, gender } = req.body;\r\n \r\n-  // Input validation\r\n-  if (!fullname || !email || !username || !password || !confirmPassword || !gender) {\r\n-    return res.status(400).json({ error: \"All fields are required\" });\r\n-  }\r\n+        // Hash password before saving\r\n+        const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n-  try {\r\n-    // Hash the password\r\n-    const hashedPassword = await bcrypt.hash(password, 10);\r\n+        // Create a new user\r\n+        const newUser = new User({\r\n+            fullName,\r\n+            username,\r\n+            password: hashedPassword, \r\n+            gender\r\n+        });\r\n \r\n-    // Create a new user\r\n-    const newUser = new User({\r\n-      username,\r\n-      email,\r\n-      password: hashedPassword,\r\n-    });\r\n+        // Save user to the database\r\n+        await newUser.save();\r\n \r\n-    await newUser.save();\r\n-    res.status(201).json({ message: \"User created successfully!\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error in signup controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n+        res.status(201).json({ message: \"User registered successfully!\" });\r\n \r\n-export const login = async (req, res) => {\r\n-  const { username, password } = req.body;\r\n-\r\n-  try {\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    if (!user) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    } catch (error) {\r\n+        console.error(\"Signup error:\", error);\r\n+        res.status(500).json({ error: \"Internal Server Error\" });\r\n     }\r\n-\r\n-    // Compare password\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n-    if (!isPasswordCorrect) {\r\n-      return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-\r\n-    // Generate token and set cookie (if applicable)\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      username: user.username,\r\n-      email: user.email,\r\n-    });\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n };\r\n-\r\n-export const updatePassword = async (req, res) => {\r\n-  // ... (existing update password logic)\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  // ... (existing logout logic)\r\n-};\r\n"
                },
                {
                    "date": 1738771415717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,33 @@\n import User from \"../models/user.model.js\";\r\n import bcrypt from \"bcryptjs\";\r\n \r\n export const signup = async (req, res) => {\r\n+    // Function to handle user login\r\n+    export const login = async (req, res) => {\r\n+        try {\r\n+            const { username, password } = req.body;\r\n+\r\n+            // Find user by username\r\n+            const user = await User.findOne({ username });\r\n+            if (!user) {\r\n+                return res.status(401).json({ error: \"Invalid credentials\" });\r\n+            }\r\n+\r\n+            // Check password\r\n+            const isMatch = await bcrypt.compare(password, user.password);\r\n+            if (!isMatch) {\r\n+                return res.status(401).json({ error: \"Invalid credentials\" });\r\n+            }\r\n+\r\n+            // Return success response\r\n+            res.status(200).json({ message: \"Login successful!\" });\r\n+        } catch (error) {\r\n+            console.error(\"Login error:\", error);\r\n+            res.status(500).json({ error: \"Internal Server Error\" });\r\n+        }\r\n+    };\r\n+\r\n     try {\r\n         const { fullName, username, password, gender } = req.body;\r\n \r\n         // Hash password before saving\r\n"
                },
                {
                    "date": 1738771439673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,33 +1,32 @@\n import User from \"../models/user.model.js\";\r\n import bcrypt from \"bcryptjs\";\r\n \r\n-export const signup = async (req, res) => {\r\n-    // Function to handle user login\r\n-    export const login = async (req, res) => {\r\n-        try {\r\n-            const { username, password } = req.body;\r\n+export const login = async (req, res) => {\r\n+    try {\r\n+        const { username, password } = req.body;\r\n \r\n-            // Find user by username\r\n-            const user = await User.findOne({ username });\r\n-            if (!user) {\r\n-                return res.status(401).json({ error: \"Invalid credentials\" });\r\n-            }\r\n+        // Find user by username\r\n+        const user = await User.findOne({ username });\r\n+        if (!user) {\r\n+            return res.status(401).json({ error: \"Invalid credentials\" });\r\n+        }\r\n \r\n-            // Check password\r\n-            const isMatch = await bcrypt.compare(password, user.password);\r\n-            if (!isMatch) {\r\n-                return res.status(401).json({ error: \"Invalid credentials\" });\r\n-            }\r\n-\r\n-            // Return success response\r\n-            res.status(200).json({ message: \"Login successful!\" });\r\n-        } catch (error) {\r\n-            console.error(\"Login error:\", error);\r\n-            res.status(500).json({ error: \"Internal Server Error\" });\r\n+        // Check password\r\n+        const isMatch = await bcrypt.compare(password, user.password);\r\n+        if (!isMatch) {\r\n+            return res.status(401).json({ error: \"Invalid credentials\" });\r\n         }\r\n-    };\r\n \r\n+        // Return success response\r\n+        res.status(200).json({ message: \"Login successful!\" });\r\n+    } catch (error) {\r\n+        console.error(\"Login error:\", error);\r\n+        res.status(500).json({ error: \"Internal Server Error\" });\r\n+    }\r\n+};\r\n+\r\n+export const signup = async (req, res) => {\r\n     try {\r\n         const { fullName, username, password, gender } = req.body;\r\n \r\n         // Hash password before saving\r\n"
                },
                {
                    "date": 1738771598767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,4 +49,15 @@\n         console.error(\"Signup error:\", error);\r\n         res.status(500).json({ error: \"Internal Server Error\" });\r\n     }\r\n };\r\n+\r\n+export const logout = async (req, res) => {\r\n+    try {\r\n+        // Clear user session or token\r\n+        res.clearCookie(\"jwt\"); // Assuming you're using cookies for session management\r\n+        res.status(200).json({ message: \"Logout successful!\" });\r\n+    } catch (error) {\r\n+        console.error(\"Logout error:\", error);\r\n+        res.status(500).json({ error: \"Internal Server Error\" });\r\n+    }\r\n+};\r\n"
                },
                {
                    "date": 1738825413934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,80 @@\n import User from \"../models/user.model.js\";\r\n import bcrypt from \"bcryptjs\";\r\n+import jwt from \"jsonwebtoken\";\r\n \r\n-export const login = async (req, res) => {\r\n+// Signup function\r\n+export const signup = async (req, res) => {\r\n     try {\r\n-        const { username, password } = req.body;\r\n+        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-        // Find user by username\r\n-        const user = await User.findOne({ username });\r\n-        if (!user) {\r\n-            return res.status(401).json({ error: \"Invalid credentials\" });\r\n+        // Check if username already exists\r\n+        const existingUser = await User.findOne({ username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ error: \"Username already exists. Please choose a different one.\" });\r\n         }\r\n \r\n-        // Check password\r\n-        const isMatch = await bcrypt.compare(password, user.password);\r\n-        if (!isMatch) {\r\n-            return res.status(401).json({ error: \"Invalid credentials\" });\r\n+        // Check if password and confirmPassword match\r\n+        if (password !== confirmPassword) {\r\n+            return res.status(400).json({ error: \"Passwords do not match. Please check and try again.\" });\r\n         }\r\n \r\n-        // Return success response\r\n-        res.status(200).json({ message: \"Login successful!\" });\r\n-    } catch (error) {\r\n-        console.error(\"Login error:\", error);\r\n-        res.status(500).json({ error: \"Internal Server Error\" });\r\n-    }\r\n-};\r\n-\r\n-export const signup = async (req, res) => {\r\n-    try {\r\n-        const { fullName, username, password, gender } = req.body;\r\n-\r\n         // Hash password before saving\r\n         const hashedPassword = await bcrypt.hash(password, 10);\r\n \r\n         // Create a new user\r\n         const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password: hashedPassword, \r\n+            password: hashedPassword,\r\n             gender\r\n         });\r\n \r\n         // Save user to the database\r\n         await newUser.save();\r\n \r\n-        res.status(201).json({ message: \"User registered successfully!\" });\r\n+        // Generate JWT token\r\n+        const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, { expiresIn: \"7d\" });\r\n \r\n+        res.status(201).json({ message: \"User registered successfully!\", token, user: newUser });\r\n+\r\n     } catch (error) {\r\n         console.error(\"Signup error:\", error);\r\n         res.status(500).json({ error: \"Internal Server Error\" });\r\n     }\r\n };\r\n \r\n-export const logout = async (req, res) => {\r\n+// Login function\r\n+export const login = async (req, res) => {\r\n     try {\r\n-        // Clear user session or token\r\n-        res.clearCookie(\"jwt\"); // Assuming you're using cookies for session management\r\n-        res.status(200).json({ message: \"Logout successful!\" });\r\n+        const { username, password } = req.body;\r\n+\r\n+        // Check if user exists\r\n+        const user = await User.findOne({ username });\r\n+        if (!user) {\r\n+            return res.status(400).json({ error: \"User not found. Please check the username.\" });\r\n+        }\r\n+\r\n+        // Compare password with stored hashed password\r\n+        const isMatch = await bcrypt.compare(password, user.password);\r\n+        if (!isMatch) {\r\n+            return res.status(400).json({ error: \"Invalid password. Please try again.\" });\r\n+        }\r\n+\r\n+        // Generate JWT token\r\n+        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: \"7d\" });\r\n+\r\n+        // Return success and user data (excluding sensitive fields like password)\r\n+        const { password: _, ...userData } = user.toObject();\r\n+        res.status(200).json({ message: \"Login successful!\", token, user: userData });\r\n+\r\n     } catch (error) {\r\n-        console.error(\"Logout error:\", error);\r\n+        console.error(\"Login error:\", error);\r\n         res.status(500).json({ error: \"Internal Server Error\" });\r\n     }\r\n };\r\n+\r\n+// Logout function (For JWT-based authentication)\r\n+export const logout = (req, res) => {\r\n+    res.clearCookie(\"jwt\", { httpOnly: true, secure: process.env.NODE_ENV === \"production\" });\r\n+    res.status(200).json({ message: \"Logged out successfully!\" });\r\n+};\r\n"
                },
                {
                    "date": 1738837625706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,88 @@\n+import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n-import bcrypt from \"bcryptjs\";\r\n-import jwt from \"jsonwebtoken\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n \r\n-// Signup function\r\n export const signup = async (req, res) => {\r\n-    try {\r\n-        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n+\ttry {\r\n+\t\tconst { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-        // Check if username already exists\r\n-        const existingUser = await User.findOne({ username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ error: \"Username already exists. Please choose a different one.\" });\r\n-        }\r\n+\t\tif (password !== confirmPassword) {\r\n+\t\t\treturn res.status(400).json({ error: \"Passwords don't match\" });\r\n+\t\t}\r\n \r\n-        // Check if password and confirmPassword match\r\n-        if (password !== confirmPassword) {\r\n-            return res.status(400).json({ error: \"Passwords do not match. Please check and try again.\" });\r\n-        }\r\n+\t\tconst user = await User.findOne({ username });\r\n \r\n-        // Hash password before saving\r\n-        const hashedPassword = await bcrypt.hash(password, 10);\r\n+\t\tif (user) {\r\n+\t\t\treturn res.status(400).json({ error: \"Username already exists\" });\r\n+\t\t}\r\n \r\n-        // Create a new user\r\n-        const newUser = new User({\r\n-            fullName,\r\n-            username,\r\n-            password: hashedPassword,\r\n-            gender\r\n-        });\r\n+\t\t// HASH PASSWORD HERE\r\n+\t\tconst salt = await bcrypt.genSalt(10);\r\n+\t\tconst hashedPassword = await bcrypt.hash(password, salt);\r\n \r\n-        // Save user to the database\r\n-        await newUser.save();\r\n+\t\t// https://avatar-placeholder.iran.liara.run/\r\n \r\n-        // Generate JWT token\r\n-        const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, { expiresIn: \"7d\" });\r\n+\t\tconst boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+\t\tconst girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n \r\n-        res.status(201).json({ message: \"User registered successfully!\", token, user: newUser });\r\n+\t\tconst newUser = new User({\r\n+\t\t\tfullName,\r\n+\t\t\tusername,\r\n+\t\t\tpassword: hashedPassword,\r\n+\t\t\tgender,\r\n+\t\t\tprofilePic: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n+\t\t});\r\n \r\n-    } catch (error) {\r\n-        console.error(\"Signup error:\", error);\r\n-        res.status(500).json({ error: \"Internal Server Error\" });\r\n-    }\r\n+\t\tif (newUser) {\r\n+\t\t\t// Generate JWT token here\r\n+\t\t\tgenerateTokenAndSetCookie(newUser._id, res);\r\n+\t\t\tawait newUser.save();\r\n+\r\n+\t\t\tres.status(201).json({\r\n+\t\t\t\t_id: newUser._id,\r\n+\t\t\t\tfullName: newUser.fullName,\r\n+\t\t\t\tusername: newUser.username,\r\n+\t\t\t\tprofilePic: newUser.profilePic,\r\n+\t\t\t});\r\n+\t\t} else {\r\n+\t\t\tres.status(400).json({ error: \"Invalid user data\" });\r\n+\t\t}\r\n+\t} catch (error) {\r\n+\t\tconsole.log(\"Error in signup controller\", error.message);\r\n+\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n+\t}\r\n };\r\n \r\n-// Login function\r\n export const login = async (req, res) => {\r\n-    try {\r\n-        const { username, password } = req.body;\r\n+\ttry {\r\n+\t\tconst { username, password } = req.body;\r\n+\t\tconst user = await User.findOne({ username });\r\n+\t\tconst isPasswordCorrect = await bcrypt.compare(password, user?.password || \"\");\r\n \r\n-        // Check if user exists\r\n-        const user = await User.findOne({ username });\r\n-        if (!user) {\r\n-            return res.status(400).json({ error: \"User not found. Please check the username.\" });\r\n-        }\r\n+\t\tif (!user || !isPasswordCorrect) {\r\n+\t\t\treturn res.status(400).json({ error: \"Invalid username or password\" });\r\n+\t\t}\r\n \r\n-        // Compare password with stored hashed password\r\n-        const isMatch = await bcrypt.compare(password, user.password);\r\n-        if (!isMatch) {\r\n-            return res.status(400).json({ error: \"Invalid password. Please try again.\" });\r\n-        }\r\n+\t\tgenerateTokenAndSetCookie(user._id, res);\r\n \r\n-        // Generate JWT token\r\n-        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: \"7d\" });\r\n-\r\n-        // Return success and user data (excluding sensitive fields like password)\r\n-        const { password: _, ...userData } = user.toObject();\r\n-        res.status(200).json({ message: \"Login successful!\", token, user: userData });\r\n-\r\n-    } catch (error) {\r\n-        console.error(\"Login error:\", error);\r\n-        res.status(500).json({ error: \"Internal Server Error\" });\r\n-    }\r\n+\t\tres.status(200).json({\r\n+\t\t\t_id: user._id,\r\n+\t\t\tfullName: user.fullName,\r\n+\t\t\tusername: user.username,\r\n+\t\t\tprofilePic: user.profilePic,\r\n+\t\t});\r\n+\t} catch (error) {\r\n+\t\tconsole.log(\"Error in login controller\", error.message);\r\n+\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n+\t}\r\n };\r\n \r\n-// Logout function (For JWT-based authentication)\r\n export const logout = (req, res) => {\r\n-    res.clearCookie(\"jwt\", { httpOnly: true, secure: process.env.NODE_ENV === \"production\" });\r\n-    res.status(200).json({ message: \"Logged out successfully!\" });\r\n-};\r\n+\ttry {\r\n+\t\tres.cookie(\"jwt\", \"\", { maxAge: 0 });\r\n+\t\tres.status(200).json({ message: \"Logged out successfully\" });\r\n+\t} catch (error) {\r\n+\t\tconsole.log(\"Error in logout controller\", error.message);\r\n+\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n+\t}\r\n+};\n\\ No newline at end of file\n"
                }
            ],
            "date": 1738103586373,
            "name": "Commit-0",
            "content": "import bcrypt from \"bcryptjs\";\r\nimport User from \"../models/user.model.js\";\r\nimport generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n\r\nexport const signup = async (req, res) => {\r\n\ttry {\r\n\t\tconst { fullName, username, password, confirmPassword, gender } = req.body;\r\n\r\n\t\tif (password !== confirmPassword) {\r\n\t\t\treturn res.status(400).json({ error: \"Passwords don't match\" });\r\n\t\t}\r\n\r\n\t\tconst user = await User.findOne({ username });\r\n\r\n\t\tif (user) {\r\n\t\t\treturn res.status(400).json({ error: \"Username already exists\" });\r\n\t\t}\r\n\r\n\t\t// HASH PASSWORD HERE\r\n\t\tconst salt = await bcrypt.genSalt(10);\r\n\t\tconst hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n\t\t// https://avatar-placeholder.iran.liara.run/\r\n\r\n\t\tconst boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n\t\tconst girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n\r\n\t\tconst newUser = new User({\r\n\t\t\tfullName,\r\n\t\t\tusername,\r\n\t\t\tpassword: hashedPassword,\r\n\t\t\tgender,\r\n\t\t\tprofilePic: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n\t\t});\r\n\r\n\t\tif (newUser) {\r\n\t\t\t// Generate JWT token here\r\n\t\t\tgenerateTokenAndSetCookie(newUser._id, res);\r\n\t\t\tawait newUser.save();\r\n\r\n\t\t\tres.status(201).json({\r\n\t\t\t\t_id: newUser._id,\r\n\t\t\t\tfullName: newUser.fullName,\r\n\t\t\t\tusername: newUser.username,\r\n\t\t\t\tprofilePic: newUser.profilePic,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tres.status(400).json({ error: \"Invalid user data\" });\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in signup controller\", error.message);\r\n\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t}\r\n};\r\n\r\nexport const login = async (req, res) => {\r\n\ttry {\r\n\t\tconst { username, password } = req.body;\r\n\t\tconst user = await User.findOne({ username });\r\n\t\tconst isPasswordCorrect = await bcrypt.compare(password, user?.password || \"\");\r\n\r\n\t\tif (!user || !isPasswordCorrect) {\r\n\t\t\treturn res.status(400).json({ error: \"Invalid username or password\" });\r\n\t\t}\r\n\r\n\t\tgenerateTokenAndSetCookie(user._id, res);\r\n\r\n\t\tres.status(200).json({\r\n\t\t\t_id: user._id,\r\n\t\t\tfullName: user.fullName,\r\n\t\t\tusername: user.username,\r\n\t\t\tprofilePic: user.profilePic,\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in login controller\", error.message);\r\n\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t}\r\n};\r\n\r\nexport const logout = (req, res) => {\r\n\ttry {\r\n\t\tres.cookie(\"jwt\", \"\", { maxAge: 0 });\r\n\t\tres.status(200).json({ message: \"Logged out successfully\" });\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in logout controller\", error.message);\r\n\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t}\r\n};"
        }
    ]
}