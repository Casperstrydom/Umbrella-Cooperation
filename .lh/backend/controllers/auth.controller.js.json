{
    "sourceFile": "backend/controllers/auth.controller.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1738103586373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738104252648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,88 +1,47 @@\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+import User from '../models/user.model.js';\r\n+export const signup = async(req, res) => {\r\n+    try{\r\n+     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n+       if(password !== confirmPassword) {\r\n+           return res.status(400).json({message: 'Passwords do not match'});\r\n+       }\r\n+       const user = await User.findOne({username}); \r\n+         if(user) {\r\n+              return res.status(400).json({message: 'User already exists'});\r\n+         };\r\n+         //HASH PASSWORD HERE\r\n+         \r\n+         // https://avatar-placeholder.iran.liara.run/\r\n \r\n-export const signup = async (req, res) => {\r\n-\ttry {\r\n-\t\tconst { fullName, username, password, confirmPassword, gender } = req.body;\r\n+         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n+         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n \r\n-\t\tif (password !== confirmPassword) {\r\n-\t\t\treturn res.status(400).json({ error: \"Passwords don't match\" });\r\n-\t\t}\r\n-\r\n-\t\tconst user = await User.findOne({ username });\r\n-\r\n-\t\tif (user) {\r\n-\t\t\treturn res.status(400).json({ error: \"Username already exists\" });\r\n-\t\t}\r\n-\r\n-\t\t// HASH PASSWORD HERE\r\n-\t\tconst salt = await bcrypt.genSalt(10);\r\n-\t\tconst hashedPassword = await bcrypt.hash(password, salt);\r\n-\r\n-\t\t// https://avatar-placeholder.iran.liara.run/\r\n-\r\n-\t\tconst boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-\t\tconst girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-\t\tconst newUser = new User({\r\n-\t\t\tfullName,\r\n-\t\t\tusername,\r\n-\t\t\tpassword: hashedPassword,\r\n-\t\t\tgender,\r\n-\t\t\tprofilePic: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n-\t\t});\r\n-\r\n-\t\tif (newUser) {\r\n-\t\t\t// Generate JWT token here\r\n-\t\t\tgenerateTokenAndSetCookie(newUser._id, res);\r\n-\t\t\tawait newUser.save();\r\n-\r\n-\t\t\tres.status(201).json({\r\n-\t\t\t\t_id: newUser._id,\r\n-\t\t\t\tfullName: newUser.fullName,\r\n-\t\t\t\tusername: newUser.username,\r\n-\t\t\t\tprofilePic: newUser.profilePic,\r\n-\t\t\t});\r\n-\t\t} else {\r\n-\t\t\tres.status(400).json({ error: \"Invalid user data\" });\r\n-\t\t}\r\n-\t} catch (error) {\r\n-\t\tconsole.log(\"Error in signup controller\", error.message);\r\n-\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n-\t}\r\n+         const newUser = new User({\r\n+            fullName,\r\n+            username,\r\n+            password,\r\n+            gender,\r\n+            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n+         })\r\n+         await newUser.save();\r\n+         res.status(201).json({\r\n+            _id: newUser._id,\r\n+            fullName: newUser.fullName,\r\n+            username: newUser.username,\r\n+            profilePic: newUser.profilePic,\r\n+         });\r\n+    } catch(error) {\r\n+        console.log('Error in signup controller', error.message);\r\n+        res.status(500).json({error: 'Internal Server Error'});\r\n+    }\r\n };\r\n\\ No newline at end of file\n \r\n-export const login = async (req, res) => {\r\n-\ttry {\r\n-\t\tconst { username, password } = req.body;\r\n-\t\tconst user = await User.findOne({ username });\r\n-\t\tconst isPasswordCorrect = await bcrypt.compare(password, user?.password || \"\");\r\n-\r\n-\t\tif (!user || !isPasswordCorrect) {\r\n-\t\t\treturn res.status(400).json({ error: \"Invalid username or password\" });\r\n-\t\t}\r\n-\r\n-\t\tgenerateTokenAndSetCookie(user._id, res);\r\n-\r\n-\t\tres.status(200).json({\r\n-\t\t\t_id: user._id,\r\n-\t\t\tfullName: user.fullName,\r\n-\t\t\tusername: user.username,\r\n-\t\t\tprofilePic: user.profilePic,\r\n-\t\t});\r\n-\t} catch (error) {\r\n-\t\tconsole.log(\"Error in login controller\", error.message);\r\n-\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n-\t}\r\n+export const login = (req, res) => {\r\n+    console.log('loginUser');\r\n+    res.send('Login route');\r\n };\r\n \r\n export const logout = (req, res) => {\r\n-\ttry {\r\n-\t\tres.cookie(\"jwt\", \"\", { maxAge: 0 });\r\n-\t\tres.status(200).json({ message: \"Logged out successfully\" });\r\n-\t} catch (error) {\r\n-\t\tconsole.log(\"Error in logout controller\", error.message);\r\n-\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n-\t}\r\n-};\n+    console.log('logoutUser');\r\n+    res.send('Logout route');\r\n+};\r\n"
                },
                {
                    "date": 1738104770119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,55 @@\n import User from '../models/user.model.js';\r\n-export const signup = async(req, res) => {\r\n-    try{\r\n-     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n-       if(password !== confirmPassword) {\r\n-           return res.status(400).json({message: 'Passwords do not match'});\r\n-       }\r\n-       const user = await User.findOne({username}); \r\n-         if(user) {\r\n-              return res.status(400).json({message: 'User already exists'});\r\n-         };\r\n-         //HASH PASSWORD HERE\r\n-         \r\n-         // https://avatar-placeholder.iran.liara.run/\r\n \r\n-         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n-         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n+export const signup = async (req, res) => {\r\n+    try {\r\n+        let { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-         const newUser = new User({\r\n+        // Check if passwords match\r\n+        if (password !== confirmPassword) {\r\n+            return res.status(400).json({ message: 'Passwords do not match' });\r\n+        }\r\n+\r\n+        // Check if user already exists\r\n+        const existingUser = await User.findOne({ username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: 'User already exists' });\r\n+        }\r\n+\r\n+        // Normalize gender to match enum values in the schema\r\n+        gender = gender.charAt(0).toUpperCase() + gender.slice(1).toLowerCase();\r\n+\r\n+        // Set default profile pictures based on gender\r\n+        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+        const profilePic = gender === 'Male' ? boyProfilePic : girlProfilePic;\r\n+\r\n+        // Create a new user\r\n+        const newUser = new User({\r\n             fullName,\r\n             username,\r\n             password,\r\n             gender,\r\n-            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n-         })\r\n-         await newUser.save();\r\n-         res.status(201).json({\r\n+            profilePicture: profilePic,\r\n+        });\r\n+\r\n+        await newUser.save();\r\n+\r\n+        // Respond with user details\r\n+        res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePic: newUser.profilePic,\r\n-         });\r\n-    } catch(error) {\r\n-        console.log('Error in signup controller', error.message);\r\n-        res.status(500).json({error: 'Internal Server Error'});\r\n+            profilePicture: newUser.profilePicture,\r\n+        });\r\n+          //HASH PASSWORD HERE\r\n+         \r\n+         // https://avatar-placeholder.iran.liara.run/\r\n+\r\n+    } catch (error) {\r\n+        console.error('Error in signup controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n \r\n export const login = (req, res) => {\r\n@@ -43,5 +59,5 @@\n \r\n export const logout = (req, res) => {\r\n     console.log('logoutUser');\r\n     res.send('Logout route');\r\n-};\n\\ No newline at end of file\n+};\r\n"
                },
                {
                    "date": 1738104982548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,55 +1,39 @@\n import User from '../models/user.model.js';\r\n+export const signup = async(req, res) => {\r\n+    try{\r\n+     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n+       if(password !== confirmPassword) {\r\n+           return res.status(400).json({message: 'Passwords do not match'});\r\n+       }\r\n+       const user = await User.findOne({username}); \r\n+         if(user) {\r\n+              return res.status(400).json({message: 'User already exists'});\r\n+         };\r\n+         //HASH PASSWORD HERE\r\n+         \r\n+         // https://avatar-placeholder.iran.liara.run/\r\n \r\n-export const signup = async (req, res) => {\r\n-    try {\r\n-        let { fullName, username, password, confirmPassword, gender } = req.body;\r\n+         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n+         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n \r\n-        // Check if passwords match\r\n-        if (password !== confirmPassword) {\r\n-            return res.status(400).json({ message: 'Passwords do not match' });\r\n-        }\r\n-\r\n-        // Check if user already exists\r\n-        const existingUser = await User.findOne({ username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ message: 'User already exists' });\r\n-        }\r\n-\r\n-        // Normalize gender to match enum values in the schema\r\n-        gender = gender.charAt(0).toUpperCase() + gender.slice(1).toLowerCase();\r\n-\r\n-        // Set default profile pictures based on gender\r\n-        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-        const profilePic = gender === 'Male' ? boyProfilePic : girlProfilePic;\r\n-\r\n-        // Create a new user\r\n-        const newUser = new User({\r\n+         const newUser = new User({\r\n             fullName,\r\n             username,\r\n             password,\r\n             gender,\r\n-            profilePicture: profilePic,\r\n-        });\r\n-\r\n-        await newUser.save();\r\n-\r\n-        // Respond with user details\r\n-        res.status(201).json({\r\n+            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n+         })\r\n+         await newUser.save();\r\n+         res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePicture: newUser.profilePicture,\r\n-        });\r\n-          //HASH PASSWORD HERE\r\n-         \r\n-         // https://avatar-placeholder.iran.liara.run/\r\n-\r\n-    } catch (error) {\r\n-        console.error('Error in signup controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n+            profilePic: newUser.profilePic,\r\n+         });\r\n+    } catch(error) {\r\n+        console.log('Error in signup controller', error.message);\r\n+        res.status(500).json({error: 'Internal Server Error'});\r\n     }\r\n };\r\n \r\n export const login = (req, res) => {\r\n"
                },
                {
                    "date": 1738105617580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,8 @@\n+import bcrypt from 'bcryptjs';\r\n import User from '../models/user.model.js';\r\n+\r\n+\r\n export const signup = async(req, res) => {\r\n     try{\r\n      const {fullName,username,password,confirmPassword,gender}= req.body;\r\n        if(password !== confirmPassword) {\r\n@@ -9,18 +12,19 @@\n          if(user) {\r\n               return res.status(400).json({message: 'User already exists'});\r\n          };\r\n          //HASH PASSWORD HERE\r\n-         \r\n+         const salt = await bcryptjs.genSalt(10);\r\n+            const hashedPassword = await bcryptjs.hash(password, salt);\r\n          // https://avatar-placeholder.iran.liara.run/\r\n \r\n          const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n          const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n \r\n          const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password,\r\n+            password: hashedPassword,\r\n             gender,\r\n             profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n          })\r\n          await newUser.save();\r\n"
                },
                {
                    "date": 1738105830952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,47 @@\n import bcrypt from 'bcryptjs';\r\n import User from '../models/user.model.js';\r\n \r\n+export const signup = async (req, res) => {\r\n+    try {\r\n+        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-export const signup = async(req, res) => {\r\n-    try{\r\n-     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n-       if(password !== confirmPassword) {\r\n-           return res.status(400).json({message: 'Passwords do not match'});\r\n-       }\r\n-       const user = await User.findOne({username}); \r\n-         if(user) {\r\n-              return res.status(400).json({message: 'User already exists'});\r\n-         };\r\n-         //HASH PASSWORD HERE\r\n-         const salt = await bcryptjs.genSalt(10);\r\n-            const hashedPassword = await bcryptjs.hash(password, salt);\r\n-         // https://avatar-placeholder.iran.liara.run/\r\n+        // Validate passwords\r\n+        if (password !== confirmPassword) {\r\n+            return res.status(400).json({ message: 'Passwords do not match' });\r\n+        }\r\n \r\n-         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n-         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n+        // Check if user already exists\r\n+        const existingUser = await User.findOne({ username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: 'User already exists' });\r\n+        }\r\n \r\n-         const newUser = new User({\r\n+        // Hash password\r\n+        const salt = await bcrypt.genSalt(10);\r\n+        const hashedPassword = await bcrypt.hash(password, salt);\r\n+\r\n+        // Set default profile picture\r\n+        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+        const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password: hashedPassword,\r\n+            password: hashedPassword, // Save the hashed password\r\n             gender,\r\n-            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n-         })\r\n-         await newUser.save();\r\n-         res.status(201).json({\r\n+            profilePicture: gender === 'male' ? boyProfilePic : girlProfilePic,\r\n+        });\r\n+\r\n+        await newUser.save();\r\n+\r\n+        res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePic: newUser.profilePic,\r\n-         });\r\n-    } catch(error) {\r\n-        console.log('Error in signup controller', error.message);\r\n-        res.status(500).json({error: 'Internal Server Error'});\r\n+            profilePicture: newUser.profilePicture,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error('Error in signup controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n-\r\n-export const login = (req, res) => {\r\n-    console.log('loginUser');\r\n-    res.send('Login route');\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-    console.log('logoutUser');\r\n-    res.send('Logout route');\r\n-};\r\n"
                },
                {
                    "date": 1738106014193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,47 +1,51 @@\n import bcrypt from 'bcryptjs';\r\n import User from '../models/user.model.js';\r\n \r\n-export const signup = async (req, res) => {\r\n-    try {\r\n-        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-        // Validate passwords\r\n-        if (password !== confirmPassword) {\r\n-            return res.status(400).json({ message: 'Passwords do not match' });\r\n-        }\r\n+export const signup = async(req, res) => {\r\n+    try{\r\n+     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n+       if(password !== confirmPassword) {\r\n+           return res.status(400).json({message: 'Passwords do not match'});\r\n+       }\r\n+       const user = await User.findOne({username}); \r\n+         if(user) {\r\n+              return res.status(400).json({message: 'User already exists'});\r\n+         };\r\n+         //HASH PASSWORD HERE\r\n+         const salt = await bcryptjs.genSalt(10);\r\n+            const hashedPassword = await bcryptjs.hash(password, salt);\r\n+         // https://avatar-placeholder.iran.liara.run/\r\n \r\n-        // Check if user already exists\r\n-        const existingUser = await User.findOne({ username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ message: 'User already exists' });\r\n-        }\r\n+         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n+         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n \r\n-        // Hash password\r\n-        const salt = await bcrypt.genSalt(10);\r\n-        const hashedPassword = await bcrypt.hash(password, salt);\r\n-\r\n-        // Set default profile picture\r\n-        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-        const newUser = new User({\r\n+         const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password: hashedPassword, // Save the hashed password\r\n+            password: hashedPassword,\r\n             gender,\r\n-            profilePicture: gender === 'male' ? boyProfilePic : girlProfilePic,\r\n-        });\r\n-\r\n-        await newUser.save();\r\n-\r\n-        res.status(201).json({\r\n+            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n+         })\r\n+         await newUser.save();\r\n+         res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePicture: newUser.profilePicture,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error('Error in signup controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n+            profilePic: newUser.profilePic,\r\n+         });\r\n+    } catch(error) {\r\n+        console.log('Error in signup controller', error.message);\r\n+        res.status(500).json({error: 'Internal Server Error'});\r\n     }\r\n };\r\n+\r\n+export const login = (req, res) => {\r\n+    console.log('loginUser');\r\n+    res.send('Login route');\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+    console.log('logoutUser');\r\n+    res.send('Logout route');\r\n+};\r\n"
                },
                {
                    "date": 1738106114231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,47 @@\n import bcrypt from 'bcryptjs';\r\n import User from '../models/user.model.js';\r\n \r\n+export const signup = async (req, res) => {\r\n+    try {\r\n+        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-export const signup = async(req, res) => {\r\n-    try{\r\n-     const {fullName,username,password,confirmPassword,gender}= req.body;\r\n-       if(password !== confirmPassword) {\r\n-           return res.status(400).json({message: 'Passwords do not match'});\r\n-       }\r\n-       const user = await User.findOne({username}); \r\n-         if(user) {\r\n-              return res.status(400).json({message: 'User already exists'});\r\n-         };\r\n-         //HASH PASSWORD HERE\r\n-         const salt = await bcryptjs.genSalt(10);\r\n-            const hashedPassword = await bcryptjs.hash(password, salt);\r\n-         // https://avatar-placeholder.iran.liara.run/\r\n+        // Validate passwords\r\n+        if (password !== confirmPassword) {\r\n+            return res.status(400).json({ message: 'Passwords do not match' });\r\n+        }\r\n \r\n-         const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`\r\n-         const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`\r\n+        // Check if user already exists\r\n+        const existingUser = await User.findOne({ username });\r\n+        if (existingUser) {\r\n+            return res.status(400).json({ message: 'User already exists' });\r\n+        }\r\n \r\n-         const newUser = new User({\r\n+        // Hash password\r\n+        const salt = await bcrypt.genSalt(10);\r\n+        const hashedPassword = await bcrypt.hash(password, salt);\r\n+\r\n+        // Set default profile picture\r\n+        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+        const newUser = new User({\r\n             fullName,\r\n             username,\r\n-            password: hashedPassword,\r\n+            password: hashedPassword, // Save the hashed password\r\n             gender,\r\n-            profilePic: gender === 'male'? boyProfilePic : girlProfilePic,\r\n-         })\r\n-         await newUser.save();\r\n-         res.status(201).json({\r\n+            profilePicture: gender === 'male' ? boyProfilePic : girlProfilePic,\r\n+        });\r\n+\r\n+        await newUser.save();\r\n+\r\n+        res.status(201).json({\r\n             _id: newUser._id,\r\n             fullName: newUser.fullName,\r\n             username: newUser.username,\r\n-            profilePic: newUser.profilePic,\r\n-         });\r\n-    } catch(error) {\r\n-        console.log('Error in signup controller', error.message);\r\n-        res.status(500).json({error: 'Internal Server Error'});\r\n+            profilePicture: newUser.profilePicture,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error('Error in signup controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n-\r\n-export const login = (req, res) => {\r\n-    console.log('loginUser');\r\n-    res.send('Login route');\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-    console.log('logoutUser');\r\n-    res.send('Logout route');\r\n-};\r\n"
                },
                {
                    "date": 1738106379728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,4 +44,44 @@\n         console.error('Error in signup controller:', error.message);\r\n         res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n+\r\n+export const login = async (req, res) => {\r\n+    try {\r\n+        const { username, password } = req.body;\r\n+\r\n+        // Find user by username\r\n+        const user = await User.findOne({ username });\r\n+        if (!user) {\r\n+            return res.status(400).json({ message: 'User not found' });\r\n+        }\r\n+\r\n+        // Compare password\r\n+        const isMatch = await bcrypt.compare(password, user.password);\r\n+        if (!isMatch) {\r\n+            return res.status(400).json({ message: 'Invalid credentials' });\r\n+        }\r\n+\r\n+        res.status(200).json({\r\n+            _id: user._id,\r\n+            fullName: user.fullName,\r\n+            username: user.username,\r\n+            profilePicture: user.profilePicture,\r\n+        });\r\n+    } catch (error) {\r\n+        console.error('Error in login controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n+    }\r\n+};\r\n+\r\n+export const logout = (req, res) => {\r\n+    try {\r\n+        // Assuming you have a session-based logout process\r\n+        req.logout(); // This might depend on your session handling middleware\r\n+\r\n+        res.status(200).json({ message: 'Logged out successfully' });\r\n+    } catch (error) {\r\n+        console.error('Error in logout controller:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n+    }\r\n+};\r\n"
                },
                {
                    "date": 1738106709416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,87 +1,91 @@\n-import bcrypt from 'bcryptjs';\r\n-import User from '../models/user.model.js';\r\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n \r\n export const signup = async (req, res) => {\r\n-    try {\r\n-        const { fullName, username, password, confirmPassword, gender } = req.body;\r\n+  try {\r\n+    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n \r\n-        // Validate passwords\r\n-        if (password !== confirmPassword) {\r\n-            return res.status(400).json({ message: 'Passwords do not match' });\r\n-        }\r\n+    // Validate passwords\r\n+    if (password !== confirmPassword) {\r\n+      return res.status(400).json({ message: \"Passwords do not match\" });\r\n+    }\r\n \r\n-        // Check if user already exists\r\n-        const existingUser = await User.findOne({ username });\r\n-        if (existingUser) {\r\n-            return res.status(400).json({ message: 'User already exists' });\r\n-        }\r\n+    // Check if user already exists\r\n+    const existingUser = await User.findOne({ username });\r\n+    if (existingUser) {\r\n+      return res.status(400).json({ message: \"User already exists\" });\r\n+    }\r\n \r\n-        // Hash password\r\n-        const salt = await bcrypt.genSalt(10);\r\n-        const hashedPassword = await bcrypt.hash(password, salt);\r\n+    // Hash password\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    const hashedPassword = await bcrypt.hash(password, salt);\r\n \r\n-        // Set default profile picture\r\n-        const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-        const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+    // Set default profile picture\r\n+    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n \r\n-        const newUser = new User({\r\n-            fullName,\r\n-            username,\r\n-            password: hashedPassword, // Save the hashed password\r\n-            gender,\r\n-            profilePicture: gender === 'male' ? boyProfilePic : girlProfilePic,\r\n-        });\r\n+    const newUser = new User({\r\n+      fullName,\r\n+      username,\r\n+      password: hashedPassword, // Save the hashed password\r\n+      gender,\r\n+      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n+    });\r\n \r\n-        await newUser.save();\r\n+    if (newUser) {\r\n+      await newUser.save();\r\n \r\n-        res.status(201).json({\r\n-            _id: newUser._id,\r\n-            fullName: newUser.fullName,\r\n-            username: newUser.username,\r\n-            profilePicture: newUser.profilePicture,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error('Error in signup controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n+      res.status(201).json({\r\n+        _id: newUser._id,\r\n+        fullName: newUser.fullName,\r\n+        username: newUser.username,\r\n+        profilePicture: newUser.profilePicture,\r\n+      });\r\n+    } else {\r\n+      res.status(400).json({ message: \"User not created\" });\r\n     }\r\n+  } catch (error) {\r\n+    console.error(\"Error in signup controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\r\n \r\n export const login = async (req, res) => {\r\n-    try {\r\n-        const { username, password } = req.body;\r\n+  try {\r\n+    const { username, password } = req.body;\r\n \r\n-        // Find user by username\r\n-        const user = await User.findOne({ username });\r\n-        if (!user) {\r\n-            return res.status(400).json({ message: 'User not found' });\r\n-        }\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    if (!user) {\r\n+      return res.status(400).json({ message: \"User not found\" });\r\n+    }\r\n \r\n-        // Compare password\r\n-        const isMatch = await bcrypt.compare(password, user.password);\r\n-        if (!isMatch) {\r\n-            return res.status(400).json({ message: 'Invalid credentials' });\r\n-        }\r\n+    // Compare password\r\n+    const isMatch = await bcrypt.compare(password, user.password);\r\n+    if (!isMatch) {\r\n+      return res.status(400).json({ message: \"Invalid credentials\" });\r\n+    }\r\n \r\n-        res.status(200).json({\r\n-            _id: user._id,\r\n-            fullName: user.fullName,\r\n-            username: user.username,\r\n-            profilePicture: user.profilePicture,\r\n-        });\r\n-    } catch (error) {\r\n-        console.error('Error in login controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n-    }\r\n+    res.status(200).json({\r\n+      _id: user._id,\r\n+      fullName: user.fullName,\r\n+      username: user.username,\r\n+      profilePicture: user.profilePicture,\r\n+    });\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\r\n \r\n export const logout = (req, res) => {\r\n-    try {\r\n-        // Assuming you have a session-based logout process\r\n-        req.logout(); // This might depend on your session handling middleware\r\n+  try {\r\n+    // Assuming you have a session-based logout process\r\n+    req.logout(); // This might depend on your session handling middleware\r\n \r\n-        res.status(200).json({ message: 'Logged out successfully' });\r\n-    } catch (error) {\r\n-        console.error('Error in logout controller:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n-    }\r\n+    res.status(200).json({ message: \"Logged out successfully\" });\r\n+  } catch (error) {\r\n+    console.error(\"Error in logout controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n };\r\n"
                },
                {
                    "date": 1738106782880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n       profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n     });\r\n \r\n     if (newUser) {\r\n+      // Generate JWT token here\r\n       await newUser.save();\r\n \r\n       res.status(201).json({\r\n         _id: newUser._id,\r\n"
                },
                {
                    "date": 1738108584217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n import bcrypt from \"bcryptjs\";\r\n import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n \r\n export const signup = async (req, res) => {\r\n   try {\r\n     const { fullName, username, password, confirmPassword, gender } = req.body;\r\n@@ -33,8 +34,9 @@\n     });\r\n \r\n     if (newUser) {\r\n       // Generate JWT token here\r\n+      await generateTokenAndSetCookie(newUser._id, res);\r\n       await newUser.save();\r\n \r\n       res.status(201).json({\r\n         _id: newUser._id,\r\n"
                },
                {
                    "date": 1738108719718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n     });\r\n \r\n     if (newUser) {\r\n       // Generate JWT token here\r\n-      await generateTokenAndSetCookie(newUser._id, res);\r\n+      generateTokenAndSetCookie(newUser._id, res);\r\n       await newUser.save();\r\n \r\n       res.status(201).json({\r\n         _id: newUser._id,\r\n"
                },
                {
                    "date": 1738110266063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,24 +58,22 @@\n     const { username, password } = req.body;\r\n \r\n     // Find user by username\r\n     const user = await User.findOne({ username });\r\n-    if (!user) {\r\n-      return res.status(400).json({ message: \"User not found\" });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n+    \r\n+    if(!user || !isPasswordCorrect) {\r\n+        return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n \r\n-    // Compare password\r\n-    const isMatch = await bcrypt.compare(password, user.password);\r\n-    if (!isMatch) {\r\n-      return res.status(400).json({ message: \"Invalid credentials\" });\r\n-    }\r\n+    res.status(200).json({\r\n+        _id: user._id,\r\n+        fullName: user.fullName,\r\n+        username: user.username,\r\n+        profilePicture: user.profilePicture,\r\n+      });\r\n \r\n-    res.status(200).json({\r\n-      _id: user._id,\r\n-      fullName: user.fullName,\r\n-      username: user.username,\r\n-      profilePicture: user.profilePicture,\r\n-    });\r\n   } catch (error) {\r\n     console.error(\"Error in login controller:\", error.message);\r\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n"
                },
                {
                    "date": 1738110461149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n     const { username, password } = req.body;\r\n \r\n     // Find user by username\r\n     const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user.password);\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n     \r\n     if(!user || !isPasswordCorrect) {\r\n         return res.status(401).json({ message: \"Invalid username or password\" });\r\n     }\r\n"
                },
                {
                    "date": 1738110960831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,91 @@\n+import bcrypt from \"bcryptjs\";\r\n+import User from \"../models/user.model.js\";\r\n+import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n+\r\n+export const signup = async (req, res) => {\r\n+  try {\r\n+    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n+\r\n+    // Validate passwords\r\n+    if (password !== confirmPassword) {\r\n+      return res.status(400).json({ message: \"Passwords do not match\" });\r\n+    }\r\n+\r\n+    // Check if user already exists\r\n+    const existingUser = await User.findOne({ username });\r\n+    if (existingUser) {\r\n+      return res.status(400).json({ message: \"User already exists\" });\r\n+    }\r\n+\r\n+    // Hash password\r\n+    const salt = await bcrypt.genSalt(10);\r\n+    const hashedPassword = await bcrypt.hash(password, salt);\r\n+\r\n+    // Set default profile picture\r\n+    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n+    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n+\r\n+    const newUser = new User({\r\n+      fullName,\r\n+      username,\r\n+      password: hashedPassword, // Save the hashed password\r\n+      gender,\r\n+      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n+    });\r\n+\r\n+    if (newUser) {\r\n+      // Generate JWT token here\r\n+      generateTokenAndSetCookie(newUser._id, res);\r\n+      await newUser.save();\r\n+\r\n+      res.status(201).json({\r\n+        _id: newUser._id,\r\n+        fullName: newUser.fullName,\r\n+        username: newUser.username,\r\n+        profilePicture: newUser.profilePicture,\r\n+      });\r\n+    } else {\r\n+      res.status(400).json({ message: \"User not created\" });\r\n+    }\r\n+  } catch (error) {\r\n+    console.error(\"Error in signup controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const login = async (req, res) => {\r\n+  try {\r\n+    const { username, password } = req.body;\r\n+\r\n+    // Find user by username\r\n+    const user = await User.findOne({ username });\r\n+    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n+    \r\n+    if(!user || !isPasswordCorrect) {\r\n+        return res.status(401).json({ message: \"Invalid username or password\" });\r\n+    }\r\n+    generateTokenAndSetCookie(user._id, res);\r\n+\r\n+    res.status(200).json({\r\n+        _id: user._id,\r\n+        fullName: user.fullName,\r\n+        username: user.username,\r\n+        profilePicture: user.profilePicture,\r\n+      });\r\n+\r\n+  } catch (error) {\r\n+    console.error(\"Error in login controller:\", error.message);\r\n+    res.status(500).json({ error: \"Internal Server Error\" });\r\n+  }\r\n+};\r\n+\r\n+export const logout = async (req, res) => {\r\n+    try {\r\n+        res.cookie('jwt','', {maxAge: 0});\r\n+        res.status(200).json({ message: \"Logged out successfully\" });\r\n+\r\n+    }catch (error) {\r\n+        console.error(\"Error in logout controller:\", error.message);\r\n+        res.status(500).json({ error: \"Internal Server Error\" });\r\n+    }\r\n+};\r\n"
                },
                {
                    "date": 1738111153456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     res.status(500).json({ error: \"Internal Server Error\" });\r\n   }\r\n };\r\n \r\n-export const logout = async (req, res) => {\r\n+export const logout = (req, res) => {\r\n     try {\r\n         res.cookie('jwt','', {maxAge: 0});\r\n         res.status(200).json({ message: \"Logged out successfully\" });\r\n \r\n@@ -88,96 +88,4 @@\n         console.error(\"Error in logout controller:\", error.message);\r\n         res.status(500).json({ error: \"Internal Server Error\" });\r\n     }\r\n };\r\n-import bcrypt from \"bcryptjs\";\r\n-import User from \"../models/user.model.js\";\r\n-import generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n-\r\n-export const signup = async (req, res) => {\r\n-  try {\r\n-    const { fullName, username, password, confirmPassword, gender } = req.body;\r\n-\r\n-    // Validate passwords\r\n-    if (password !== confirmPassword) {\r\n-      return res.status(400).json({ message: \"Passwords do not match\" });\r\n-    }\r\n-\r\n-    // Check if user already exists\r\n-    const existingUser = await User.findOne({ username });\r\n-    if (existingUser) {\r\n-      return res.status(400).json({ message: \"User already exists\" });\r\n-    }\r\n-\r\n-    // Hash password\r\n-    const salt = await bcrypt.genSalt(10);\r\n-    const hashedPassword = await bcrypt.hash(password, salt);\r\n-\r\n-    // Set default profile picture\r\n-    const boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n-    const girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n-\r\n-    const newUser = new User({\r\n-      fullName,\r\n-      username,\r\n-      password: hashedPassword, // Save the hashed password\r\n-      gender,\r\n-      profilePicture: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n-    });\r\n-\r\n-    if (newUser) {\r\n-      // Generate JWT token here\r\n-      generateTokenAndSetCookie(newUser._id, res);\r\n-      await newUser.save();\r\n-\r\n-      res.status(201).json({\r\n-        _id: newUser._id,\r\n-        fullName: newUser.fullName,\r\n-        username: newUser.username,\r\n-        profilePicture: newUser.profilePicture,\r\n-      });\r\n-    } else {\r\n-      res.status(400).json({ message: \"User not created\" });\r\n-    }\r\n-  } catch (error) {\r\n-    console.error(\"Error in signup controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const login = async (req, res) => {\r\n-  try {\r\n-    const { username, password } = req.body;\r\n-\r\n-    // Find user by username\r\n-    const user = await User.findOne({ username });\r\n-    const isPasswordCorrect = await bcrypt.compare(password, user?.password || '');\r\n-    \r\n-    if(!user || !isPasswordCorrect) {\r\n-        return res.status(401).json({ message: \"Invalid username or password\" });\r\n-    }\r\n-    generateTokenAndSetCookie(user._id, res);\r\n-\r\n-    res.status(200).json({\r\n-        _id: user._id,\r\n-        fullName: user.fullName,\r\n-        username: user.username,\r\n-        profilePicture: user.profilePicture,\r\n-      });\r\n-\r\n-  } catch (error) {\r\n-    console.error(\"Error in login controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n-\r\n-export const logout = (req, res) => {\r\n-  try {\r\n-    // Assuming you have a session-based logout process\r\n-    req.logout(); // This might depend on your session handling middleware\r\n-\r\n-    res.status(200).json({ message: \"Logged out successfully\" });\r\n-  } catch (error) {\r\n-    console.error(\"Error in logout controller:\", error.message);\r\n-    res.status(500).json({ error: \"Internal Server Error\" });\r\n-  }\r\n-};\r\n"
                }
            ],
            "date": 1738103586373,
            "name": "Commit-0",
            "content": "import bcrypt from \"bcryptjs\";\r\nimport User from \"../models/user.model.js\";\r\nimport generateTokenAndSetCookie from \"../utils/generateToken.js\";\r\n\r\nexport const signup = async (req, res) => {\r\n\ttry {\r\n\t\tconst { fullName, username, password, confirmPassword, gender } = req.body;\r\n\r\n\t\tif (password !== confirmPassword) {\r\n\t\t\treturn res.status(400).json({ error: \"Passwords don't match\" });\r\n\t\t}\r\n\r\n\t\tconst user = await User.findOne({ username });\r\n\r\n\t\tif (user) {\r\n\t\t\treturn res.status(400).json({ error: \"Username already exists\" });\r\n\t\t}\r\n\r\n\t\t// HASH PASSWORD HERE\r\n\t\tconst salt = await bcrypt.genSalt(10);\r\n\t\tconst hashedPassword = await bcrypt.hash(password, salt);\r\n\r\n\t\t// https://avatar-placeholder.iran.liara.run/\r\n\r\n\t\tconst boyProfilePic = `https://avatar.iran.liara.run/public/boy?username=${username}`;\r\n\t\tconst girlProfilePic = `https://avatar.iran.liara.run/public/girl?username=${username}`;\r\n\r\n\t\tconst newUser = new User({\r\n\t\t\tfullName,\r\n\t\t\tusername,\r\n\t\t\tpassword: hashedPassword,\r\n\t\t\tgender,\r\n\t\t\tprofilePic: gender === \"male\" ? boyProfilePic : girlProfilePic,\r\n\t\t});\r\n\r\n\t\tif (newUser) {\r\n\t\t\t// Generate JWT token here\r\n\t\t\tgenerateTokenAndSetCookie(newUser._id, res);\r\n\t\t\tawait newUser.save();\r\n\r\n\t\t\tres.status(201).json({\r\n\t\t\t\t_id: newUser._id,\r\n\t\t\t\tfullName: newUser.fullName,\r\n\t\t\t\tusername: newUser.username,\r\n\t\t\t\tprofilePic: newUser.profilePic,\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tres.status(400).json({ error: \"Invalid user data\" });\r\n\t\t}\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in signup controller\", error.message);\r\n\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t}\r\n};\r\n\r\nexport const login = async (req, res) => {\r\n\ttry {\r\n\t\tconst { username, password } = req.body;\r\n\t\tconst user = await User.findOne({ username });\r\n\t\tconst isPasswordCorrect = await bcrypt.compare(password, user?.password || \"\");\r\n\r\n\t\tif (!user || !isPasswordCorrect) {\r\n\t\t\treturn res.status(400).json({ error: \"Invalid username or password\" });\r\n\t\t}\r\n\r\n\t\tgenerateTokenAndSetCookie(user._id, res);\r\n\r\n\t\tres.status(200).json({\r\n\t\t\t_id: user._id,\r\n\t\t\tfullName: user.fullName,\r\n\t\t\tusername: user.username,\r\n\t\t\tprofilePic: user.profilePic,\r\n\t\t});\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in login controller\", error.message);\r\n\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t}\r\n};\r\n\r\nexport const logout = (req, res) => {\r\n\ttry {\r\n\t\tres.cookie(\"jwt\", \"\", { maxAge: 0 });\r\n\t\tres.status(200).json({ message: \"Logged out successfully\" });\r\n\t} catch (error) {\r\n\t\tconsole.log(\"Error in logout controller\", error.message);\r\n\t\tres.status(500).json({ error: \"Internal Server Error\" });\r\n\t}\r\n};"
        }
    ]
}