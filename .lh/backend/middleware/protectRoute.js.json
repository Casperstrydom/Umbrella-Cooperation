{
    "sourceFile": "backend/middleware/protectRoute.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1738135107042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738135729242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,19 @@\n import jwt from 'jsonwebtoken';\r\n-\r\n+import User from '../models/user.model.js';\r\n const protectRoute = (req, res) => {\r\n     try {\r\n         const token = req.cookies.jwt;\r\n+        if(!token) {\r\n+            return res.status(401).json({error: 'Unauthorized - No Token Provided'});\r\n+        }\r\n+        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+\r\n+        if(!decoded) {\r\n+            return res.status(401).json({error: 'Unauthorized - Invalid Token'});\r\n+        }\r\n+\r\n+        const user = await User.findById(decoded.userId);\r\n         \r\n     } catch (error) {\r\n         console.error('Error in protectRoute middleware:', error.message);\r\n         res.status(500).json({error: 'Internal Server Error'});\r\n"
                },
                {
                    "date": 1738136014153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import jwt from 'jsonwebtoken';\r\n import User from '../models/user.model.js';\r\n-const protectRoute = (req, res) => {\r\n+const protectRoute = async (req, res, next) => {\r\n     try {\r\n         const token = req.cookies.jwt;\r\n         if(!token) {\r\n             return res.status(401).json({error: 'Unauthorized - No Token Provided'});\r\n@@ -11,11 +11,19 @@\n         if(!decoded) {\r\n             return res.status(401).json({error: 'Unauthorized - Invalid Token'});\r\n         }\r\n \r\n-        const user = await User.findById(decoded.userId);\r\n-        \r\n+        const user = await User.findById(decoded.userId).select('-password');\r\n+        if(!user) {\r\n+            return res.status(404).json({error: 'User not found'});\r\n+        }\r\n+        req.user = user;\r\n\\ No newline at end of file\n+\r\n+        next();\r\n+\r\n     } catch (error) {\r\n         console.error('Error in protectRoute middleware:', error.message);\r\n         res.status(500).json({error: 'Internal Server Error'});\r\n     }\r\n-};\n+};\r\n+\r\n+export default protectRoute;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738138004492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         const user = await User.findById(decoded.userId).select('-password');\r\n         if(!user) {\r\n             return res.status(404).json({error: 'User not found'});\r\n         }\r\n-        req.user = user;\r\n+        req.user_id = user._id; \r\n \r\n         next();\r\n \r\n     } catch (error) {\r\n"
                },
                {
                    "date": 1738589774039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,32 @@\n import jwt from 'jsonwebtoken';\r\n import User from '../models/user.model.js';\r\n+\r\n const protectRoute = async (req, res, next) => {\r\n     try {\r\n-        const token = req.cookies.jwt;\r\n-        if(!token) {\r\n-            return res.status(401).json({error: 'Unauthorized - No Token Provided'});\r\n+        const token = req.cookies.jwt; // or you can get it from headers: req.headers.authorization\r\n+        if (!token) {\r\n+            return res.status(401).json({ error: 'Unauthorized - No Token Provided' });\r\n         }\r\n+\r\n+        // Verify the token\r\n         const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n \r\n-        if(!decoded) {\r\n-            return res.status(401).json({error: 'Unauthorized - Invalid Token'});\r\n-        }\r\n-\r\n+        // Token is valid, but check if user exists\r\n         const user = await User.findById(decoded.userId).select('-password');\r\n-        if(!user) {\r\n-            return res.status(404).json({error: 'User not found'});\r\n+        if (!user) {\r\n+            return res.status(404).json({ error: 'User not found' });\r\n         }\r\n-        req.user_id = user._id; \r\n \r\n\\ No newline at end of file\n-        next();\r\n+        req.user_id = user._id; // Attach user ID to request object\r\n \r\n+        next(); // Proceed to the next middleware or route handler\r\n     } catch (error) {\r\n+        if (error.name === 'TokenExpiredError') {\r\n+            return res.status(401).json({ error: 'Unauthorized - Token Expired' });\r\n+        }\r\n         console.error('Error in protectRoute middleware:', error.message);\r\n-        res.status(500).json({error: 'Internal Server Error'});\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n     }\r\n };\r\n \r\n-export default protectRoute;\n+export default protectRoute;\r\n"
                },
                {
                    "date": 1738668084915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,31 +2,33 @@\n import User from '../models/user.model.js';\r\n \r\n const protectRoute = async (req, res, next) => {\r\n     try {\r\n-        const token = req.cookies.jwt; // or you can get it from headers: req.headers.authorization\r\n+        const token = req.cookies?.jwt; // Ensure cookies exist\r\n+\r\n         if (!token) {\r\n             return res.status(401).json({ error: 'Unauthorized - No Token Provided' });\r\n         }\r\n \r\n-        // Verify the token\r\n-        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+        let decoded;\r\n+        try {\r\n+            decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+        } catch (error) {\r\n+            if (error.name === 'TokenExpiredError') {\r\n+                return res.status(401).json({ error: 'Unauthorized - Token Expired' });\r\n+            }\r\n+            throw error; // Rethrow if it's another error\r\n+        }\r\n \r\n-        // Token is valid, but check if user exists\r\n+        // Check if user exists in DB\r\n         const user = await User.findById(decoded.userId).select('-password');\r\n         if (!user) {\r\n             return res.status(404).json({ error: 'User not found' });\r\n         }\r\n \r\n-        req.user_id = user._id; // Attach user ID to request object\r\n\\ No newline at end of file\n-\r\n-        next(); // Proceed to the next middleware or route handler\r\n+        req.user_id = user._id;\r\n+        next();\r\n     } catch (error) {\r\n-        if (error.name === 'TokenExpiredError') {\r\n-            return res.status(401).json({ error: 'Unauthorized - Token Expired' });\r\n-        }\r\n-        console.error('Error in protectRoute middleware:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n-    }\r\n-};\r\n+        console.error('Error in protectRoute middleware:', error);\r\n \r\n-export default protectRoute;\n+        if (error.code === 'ECONNRESET') {\r\n+            return res.status(500).json({ error: 'Database connection lost. Please \r\n"
                },
                {
                    "date": 1738668143576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,33 +2,31 @@\n import User from '../models/user.model.js';\r\n \r\n const protectRoute = async (req, res, next) => {\r\n     try {\r\n-        const token = req.cookies?.jwt; // Ensure cookies exist\r\n-\r\n+        const token = req.cookies.jwt; // or you can get it from headers: req.headers.authorization\r\n         if (!token) {\r\n             return res.status(401).json({ error: 'Unauthorized - No Token Provided' });\r\n         }\r\n \r\n-        let decoded;\r\n-        try {\r\n-            decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n-        } catch (error) {\r\n-            if (error.name === 'TokenExpiredError') {\r\n-                return res.status(401).json({ error: 'Unauthorized - Token Expired' });\r\n-            }\r\n-            throw error; // Rethrow if it's another error\r\n-        }\r\n+        // Verify the token\r\n+        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n \r\n-        // Check if user exists in DB\r\n+        // Token is valid, but check if user exists\r\n         const user = await User.findById(decoded.userId).select('-password');\r\n         if (!user) {\r\n             return res.status(404).json({ error: 'User not found' });\r\n         }\r\n \r\n-        req.user_id = user._id;\r\n-        next();\r\n+        req.user_id = user._id; // Attach user ID to request object\r\n+\r\n+        next(); // Proceed to the next middleware or route handler\r\n     } catch (error) {\r\n-        console.error('Error in protectRoute middleware:', error);\r\n+        if (error.name === 'TokenExpiredError') {\r\n+            return res.status(401).json({ error: 'Unauthorized - Token Expired' });\r\n+        }\r\n+        console.error('Error in protectRoute middleware:', error.message);\r\n+        res.status(500).json({ error: 'Internal Server Error' });\r\n+    }\r\n+};\r\n \r\n-        if (error.code === 'ECONNRESET') {\r\n-            return res.status(500).json({ error: 'Database connection lost. Please \r\n+export default protectRoute;\r\n"
                },
                {
                    "date": 1738825308847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,38 @@\n-import jwt from 'jsonwebtoken';\r\n-import User from '../models/user.model.js';\r\n+import jwt from \"jsonwebtoken\";\r\n+import User from \"../models/user.model.js\";\r\n \r\n const protectRoute = async (req, res, next) => {\r\n     try {\r\n-        const token = req.cookies.jwt; // or you can get it from headers: req.headers.authorization\r\n+        // Get token from cookies OR Authorization header (Bearer Token)\r\n+        const token = req.cookies.jwt || req.headers.authorization?.split(\" \")[1];\r\n+\r\n         if (!token) {\r\n-            return res.status(401).json({ error: 'Unauthorized - No Token Provided' });\r\n+            return res.status(401).json({ error: \"Unauthorized - No Token Provided\" });\r\n         }\r\n \r\n         // Verify the token\r\n         const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n \r\n-        // Token is valid, but check if user exists\r\n-        const user = await User.findById(decoded.userId).select('-password');\r\n+        // Find user in the database\r\n+        const user = await User.findById(decoded.userId).select(\"-password\");\r\n+\r\n         if (!user) {\r\n-            return res.status(404).json({ error: 'User not found' });\r\n+            return res.status(404).json({ error: \"User not found\" });\r\n         }\r\n \r\n         req.user_id = user._id; // Attach user ID to request object\r\n \r\n-        next(); // Proceed to the next middleware or route handler\r\n+        next(); // Proceed to next middleware or route handler\r\n     } catch (error) {\r\n-        if (error.name === 'TokenExpiredError') {\r\n-            return res.status(401).json({ error: 'Unauthorized - Token Expired' });\r\n+        if (error.name === \"TokenExpiredError\") {\r\n+            return res.status(401).json({ \r\n+                error: \"Unauthorized - Token Expired. Please log in again.\" \r\n+            });\r\n         }\r\n-        console.error('Error in protectRoute middleware:', error.message);\r\n-        res.status(500).json({ error: 'Internal Server Error' });\r\n+\r\n+        console.error(\"Error in protectRoute middleware:\", error);\r\n+        res.status(500).json({ error: \"Internal Server Error\" });\r\n     }\r\n };\r\n \r\n export default protectRoute;\r\n"
                },
                {
                    "date": 1738837776720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,33 @@\n import jwt from \"jsonwebtoken\";\r\n import User from \"../models/user.model.js\";\r\n \r\n const protectRoute = async (req, res, next) => {\r\n-    try {\r\n-        // Get token from cookies OR Authorization header (Bearer Token)\r\n-        const token = req.cookies.jwt || req.headers.authorization?.split(\" \")[1];\r\n+\ttry {\r\n+\t\tconst token = req.cookies.jwt;\r\n \r\n-        if (!token) {\r\n-            return res.status(401).json({ error: \"Unauthorized - No Token Provided\" });\r\n-        }\r\n+\t\tif (!token) {\r\n+\t\t\treturn res.status(401).json({ error: \"Unauthorized - No Token Provided\" });\r\n+\t\t}\r\n \r\n-        // Verify the token\r\n-        const decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n+\t\tconst decoded = jwt.verify(token, process.env.JWT_SECRET);\r\n \r\n-        // Find user in the database\r\n-        const user = await User.findById(decoded.userId).select(\"-password\");\r\n+\t\tif (!decoded) {\r\n+\t\t\treturn res.status(401).json({ error: \"Unauthorized - Invalid Token\" });\r\n+\t\t}\r\n \r\n-        if (!user) {\r\n-            return res.status(404).json({ error: \"User not found\" });\r\n-        }\r\n+\t\tconst user = await User.findById(decoded.userId).select(\"-password\");\r\n \r\n-        req.user_id = user._id; // Attach user ID to request object\r\n+\t\tif (!user) {\r\n+\t\t\treturn res.status(404).json({ error: \"User not found\" });\r\n+\t\t}\r\n \r\n-        next(); // Proceed to next middleware or route handler\r\n-    } catch (error) {\r\n-        if (error.name === \"TokenExpiredError\") {\r\n-            return res.status(401).json({ \r\n-                error: \"Unauthorized - Token Expired. Please log in again.\" \r\n-            });\r\n-        }\r\n+\t\treq.user = user;\r\n \r\n-        console.error(\"Error in protectRoute middleware:\", error);\r\n-        res.status(500).json({ error: \"Internal Server Error\" });\r\n-    }\r\n+\t\tnext();\r\n+\t} catch (error) {\r\n+\t\tconsole.log(\"Error in protectRoute middleware: \", error.message);\r\n+\t\tres.status(500).json({ error: \"Internal server error\" });\r\n+\t}\r\n };\r\n \r\n-export default protectRoute;\r\n+export default protectRoute;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1738135107042,
            "name": "Commit-0",
            "content": "import jwt from 'jsonwebtoken';\r\n\r\nconst protectRoute = (req, res) => {\r\n    try {\r\n        const token = req.cookies.jwt;\r\n        \r\n    } catch (error) {\r\n        console.error('Error in protectRoute middleware:', error.message);\r\n        res.status(500).json({error: 'Internal Server Error'});\r\n    }\r\n};"
        }
    ]
}